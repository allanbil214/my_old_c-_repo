'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NewBakery")>  _
Partial Public Class SquekingDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertSellingHeader(instance As SellingHeader)
    End Sub
  Partial Private Sub UpdateSellingHeader(instance As SellingHeader)
    End Sub
  Partial Private Sub DeleteSellingHeader(instance As SellingHeader)
    End Sub
  Partial Private Sub InsertFood(instance As Food)
    End Sub
  Partial Private Sub UpdateFood(instance As Food)
    End Sub
  Partial Private Sub DeleteFood(instance As Food)
    End Sub
  Partial Private Sub InsertIncomingRawMaterialDetail(instance As IncomingRawMaterialDetail)
    End Sub
  Partial Private Sub UpdateIncomingRawMaterialDetail(instance As IncomingRawMaterialDetail)
    End Sub
  Partial Private Sub DeleteIncomingRawMaterialDetail(instance As IncomingRawMaterialDetail)
    End Sub
  Partial Private Sub InsertIncomingRawMaterialHeader(instance As IncomingRawMaterialHeader)
    End Sub
  Partial Private Sub UpdateIncomingRawMaterialHeader(instance As IncomingRawMaterialHeader)
    End Sub
  Partial Private Sub DeleteIncomingRawMaterialHeader(instance As IncomingRawMaterialHeader)
    End Sub
  Partial Private Sub InsertProductionDetail(instance As ProductionDetail)
    End Sub
  Partial Private Sub UpdateProductionDetail(instance As ProductionDetail)
    End Sub
  Partial Private Sub DeleteProductionDetail(instance As ProductionDetail)
    End Sub
  Partial Private Sub InsertProductionHeader(instance As ProductionHeader)
    End Sub
  Partial Private Sub UpdateProductionHeader(instance As ProductionHeader)
    End Sub
  Partial Private Sub DeleteProductionHeader(instance As ProductionHeader)
    End Sub
  Partial Private Sub InsertRawMaterial(instance As RawMaterial)
    End Sub
  Partial Private Sub UpdateRawMaterial(instance As RawMaterial)
    End Sub
  Partial Private Sub DeleteRawMaterial(instance As RawMaterial)
    End Sub
  Partial Private Sub InsertRawMaterialIntake(instance As RawMaterialIntake)
    End Sub
  Partial Private Sub UpdateRawMaterialIntake(instance As RawMaterialIntake)
    End Sub
  Partial Private Sub DeleteRawMaterialIntake(instance As RawMaterialIntake)
    End Sub
  Partial Private Sub InsertRecipeDetail(instance As RecipeDetail)
    End Sub
  Partial Private Sub UpdateRecipeDetail(instance As RecipeDetail)
    End Sub
  Partial Private Sub DeleteRecipeDetail(instance As RecipeDetail)
    End Sub
  Partial Private Sub InsertRecipeHeader(instance As RecipeHeader)
    End Sub
  Partial Private Sub UpdateRecipeHeader(instance As RecipeHeader)
    End Sub
  Partial Private Sub DeleteRecipeHeader(instance As RecipeHeader)
    End Sub
  Partial Private Sub InsertSellingDetail(instance As SellingDetail)
    End Sub
  Partial Private Sub UpdateSellingDetail(instance As SellingDetail)
    End Sub
  Partial Private Sub DeleteSellingDetail(instance As SellingDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.NewBakery.My.MySettings.Default.NewBakeryConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property SellingHeaders() As System.Data.Linq.Table(Of SellingHeader)
		Get
			Return Me.GetTable(Of SellingHeader)
		End Get
	End Property
	
	Public ReadOnly Property Foods() As System.Data.Linq.Table(Of Food)
		Get
			Return Me.GetTable(Of Food)
		End Get
	End Property
	
	Public ReadOnly Property IncomingRawMaterialDetails() As System.Data.Linq.Table(Of IncomingRawMaterialDetail)
		Get
			Return Me.GetTable(Of IncomingRawMaterialDetail)
		End Get
	End Property
	
	Public ReadOnly Property IncomingRawMaterialHeaders() As System.Data.Linq.Table(Of IncomingRawMaterialHeader)
		Get
			Return Me.GetTable(Of IncomingRawMaterialHeader)
		End Get
	End Property
	
	Public ReadOnly Property ProductionDetails() As System.Data.Linq.Table(Of ProductionDetail)
		Get
			Return Me.GetTable(Of ProductionDetail)
		End Get
	End Property
	
	Public ReadOnly Property ProductionHeaders() As System.Data.Linq.Table(Of ProductionHeader)
		Get
			Return Me.GetTable(Of ProductionHeader)
		End Get
	End Property
	
	Public ReadOnly Property RawMaterials() As System.Data.Linq.Table(Of RawMaterial)
		Get
			Return Me.GetTable(Of RawMaterial)
		End Get
	End Property
	
	Public ReadOnly Property RawMaterialIntakes() As System.Data.Linq.Table(Of RawMaterialIntake)
		Get
			Return Me.GetTable(Of RawMaterialIntake)
		End Get
	End Property
	
	Public ReadOnly Property RecipeDetails() As System.Data.Linq.Table(Of RecipeDetail)
		Get
			Return Me.GetTable(Of RecipeDetail)
		End Get
	End Property
	
	Public ReadOnly Property RecipeHeaders() As System.Data.Linq.Table(Of RecipeHeader)
		Get
			Return Me.GetTable(Of RecipeHeader)
		End Get
	End Property
	
	Public ReadOnly Property SellingDetails() As System.Data.Linq.Table(Of SellingDetail)
		Get
			Return Me.GetTable(Of SellingDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _EmployeeId As Integer
	
	Private _EmployeeName As String
	
	Private _Password As String
	
	Private _EmployeeAddress As String
	
	Private _EmployeePhone As String
	
	Private _Status As String
	
	Private _Email As String
	
	Private _SellingHeaders As EntitySet(Of SellingHeader)
	
	Private _ProductionHeaders As EntitySet(Of ProductionHeader)
	
	Private _RawMaterials As EntitySet(Of RawMaterial)
	
	Private _RecipeHeaders As EntitySet(Of RecipeHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnEmployeeNameChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeNameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnEmployeeAddressChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeeAddressChanged()
    End Sub
    Partial Private Sub OnEmployeePhoneChanging(value As String)
    End Sub
    Partial Private Sub OnEmployeePhoneChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SellingHeaders = New EntitySet(Of SellingHeader)(AddressOf Me.attach_SellingHeaders, AddressOf Me.detach_SellingHeaders)
		Me._ProductionHeaders = New EntitySet(Of ProductionHeader)(AddressOf Me.attach_ProductionHeaders, AddressOf Me.detach_ProductionHeaders)
		Me._RawMaterials = New EntitySet(Of RawMaterial)(AddressOf Me.attach_RawMaterials, AddressOf Me.detach_RawMaterials)
		Me._RecipeHeaders = New EntitySet(Of RecipeHeader)(AddressOf Me.attach_RecipeHeaders, AddressOf Me.detach_RecipeHeaders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property EmployeeName() As String
		Get
			Return Me._EmployeeName
		End Get
		Set
			If (String.Equals(Me._EmployeeName, value) = false) Then
				Me.OnEmployeeNameChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeName = value
				Me.SendPropertyChanged("EmployeeName")
				Me.OnEmployeeNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeAddress", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property EmployeeAddress() As String
		Get
			Return Me._EmployeeAddress
		End Get
		Set
			If (String.Equals(Me._EmployeeAddress, value) = false) Then
				Me.OnEmployeeAddressChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeAddress = value
				Me.SendPropertyChanged("EmployeeAddress")
				Me.OnEmployeeAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeePhone", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property EmployeePhone() As String
		Get
			Return Me._EmployeePhone
		End Get
		Set
			If (String.Equals(Me._EmployeePhone, value) = false) Then
				Me.OnEmployeePhoneChanging(value)
				Me.SendPropertyChanging
				Me._EmployeePhone = value
				Me.SendPropertyChanged("EmployeePhone")
				Me.OnEmployeePhoneChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(1) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_SellingHeader", Storage:="_SellingHeaders", ThisKey:="EmployeeId", OtherKey:="EmployeeId")>  _
	Public Property SellingHeaders() As EntitySet(Of SellingHeader)
		Get
			Return Me._SellingHeaders
		End Get
		Set
			Me._SellingHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_ProductionHeader", Storage:="_ProductionHeaders", ThisKey:="EmployeeId", OtherKey:="EmployeeId")>  _
	Public Property ProductionHeaders() As EntitySet(Of ProductionHeader)
		Get
			Return Me._ProductionHeaders
		End Get
		Set
			Me._ProductionHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_RawMaterial", Storage:="_RawMaterials", ThisKey:="EmployeeId", OtherKey:="EmployeeId")>  _
	Public Property RawMaterials() As EntitySet(Of RawMaterial)
		Get
			Return Me._RawMaterials
		End Get
		Set
			Me._RawMaterials.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_RecipeHeader", Storage:="_RecipeHeaders", ThisKey:="EmployeeId", OtherKey:="EmployeeId")>  _
	Public Property RecipeHeaders() As EntitySet(Of RecipeHeader)
		Get
			Return Me._RecipeHeaders
		End Get
		Set
			Me._RecipeHeaders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SellingHeaders(ByVal entity As SellingHeader)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_SellingHeaders(ByVal entity As SellingHeader)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
	
	Private Sub attach_ProductionHeaders(ByVal entity As ProductionHeader)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_ProductionHeaders(ByVal entity As ProductionHeader)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
	
	Private Sub attach_RawMaterials(ByVal entity As RawMaterial)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_RawMaterials(ByVal entity As RawMaterial)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
	
	Private Sub attach_RecipeHeaders(ByVal entity As RecipeHeader)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_RecipeHeaders(ByVal entity As RecipeHeader)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SellingHeader")>  _
Partial Public Class SellingHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SellingId As Integer
	
	Private _SellingDate As Date
	
	Private _Discount As Integer
	
	Private _EmployeeId As Integer
	
	Private _SellingDetails As EntitySet(Of SellingDetail)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSellingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSellingIdChanged()
    End Sub
    Partial Private Sub OnSellingDateChanging(value As Date)
    End Sub
    Partial Private Sub OnSellingDateChanged()
    End Sub
    Partial Private Sub OnDiscountChanging(value As Integer)
    End Sub
    Partial Private Sub OnDiscountChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._SellingDetails = New EntitySet(Of SellingDetail)(AddressOf Me.attach_SellingDetails, AddressOf Me.detach_SellingDetails)
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellingId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property SellingId() As Integer
		Get
			Return Me._SellingId
		End Get
		Set
			If ((Me._SellingId = value)  _
						= false) Then
				Me.OnSellingIdChanging(value)
				Me.SendPropertyChanging
				Me._SellingId = value
				Me.SendPropertyChanged("SellingId")
				Me.OnSellingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellingDate", DbType:="Date NOT NULL")>  _
	Public Property SellingDate() As Date
		Get
			Return Me._SellingDate
		End Get
		Set
			If ((Me._SellingDate = value)  _
						= false) Then
				Me.OnSellingDateChanging(value)
				Me.SendPropertyChanging
				Me._SellingDate = value
				Me.SendPropertyChanged("SellingDate")
				Me.OnSellingDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Discount", DbType:="Int NOT NULL")>  _
	Public Property Discount() As Integer
		Get
			Return Me._Discount
		End Get
		Set
			If ((Me._Discount = value)  _
						= false) Then
				Me.OnDiscountChanging(value)
				Me.SendPropertyChanging
				Me._Discount = value
				Me.SendPropertyChanged("Discount")
				Me.OnDiscountChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SellingHeader_SellingDetail", Storage:="_SellingDetails", ThisKey:="SellingId", OtherKey:="SellingId")>  _
	Public Property SellingDetails() As EntitySet(Of SellingDetail)
		Get
			Return Me._SellingDetails
		End Get
		Set
			Me._SellingDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_SellingHeader", Storage:="_Employee", ThisKey:="EmployeeId", OtherKey:="EmployeeId", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.SellingHeaders.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SellingHeaders.Add(Me)
					Me._EmployeeId = value.EmployeeId
				Else
					Me._EmployeeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_SellingDetails(ByVal entity As SellingDetail)
		Me.SendPropertyChanging
		entity.SellingHeader = Me
	End Sub
	
	Private Sub detach_SellingDetails(ByVal entity As SellingDetail)
		Me.SendPropertyChanging
		entity.SellingHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Food")>  _
Partial Public Class Food
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _FoodId As Integer
	
	Private _FoodName As String
	
	Private _Description As String
	
	Private _Price As Integer
	
	Private _Status As Char
	
	Private _ProductionDetails As EntitySet(Of ProductionDetail)
	
	Private _RecipeHeaders As EntitySet(Of RecipeHeader)
	
	Private _SellingDetails As EntitySet(Of SellingDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnFoodIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFoodIdChanged()
    End Sub
    Partial Private Sub OnFoodNameChanging(value As String)
    End Sub
    Partial Private Sub OnFoodNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Char)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductionDetails = New EntitySet(Of ProductionDetail)(AddressOf Me.attach_ProductionDetails, AddressOf Me.detach_ProductionDetails)
		Me._RecipeHeaders = New EntitySet(Of RecipeHeader)(AddressOf Me.attach_RecipeHeaders, AddressOf Me.detach_RecipeHeaders)
		Me._SellingDetails = New EntitySet(Of SellingDetail)(AddressOf Me.attach_SellingDetails, AddressOf Me.detach_SellingDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property FoodId() As Integer
		Get
			Return Me._FoodId
		End Get
		Set
			If ((Me._FoodId = value)  _
						= false) Then
				Me.OnFoodIdChanging(value)
				Me.SendPropertyChanging
				Me._FoodId = value
				Me.SendPropertyChanged("FoodId")
				Me.OnFoodIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property FoodName() As String
		Get
			Return Me._FoodName
		End Get
		Set
			If (String.Equals(Me._FoodName, value) = false) Then
				Me.OnFoodNameChanging(value)
				Me.SendPropertyChanging
				Me._FoodName = value
				Me.SendPropertyChanged("FoodName")
				Me.OnFoodNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int NOT NULL")>  _
	Public Property Price() As Integer
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Char(1) NOT NULL")>  _
	Public Property Status() As Char
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_ProductionDetail", Storage:="_ProductionDetails", ThisKey:="FoodId", OtherKey:="FoodId")>  _
	Public Property ProductionDetails() As EntitySet(Of ProductionDetail)
		Get
			Return Me._ProductionDetails
		End Get
		Set
			Me._ProductionDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_RecipeHeader", Storage:="_RecipeHeaders", ThisKey:="FoodId", OtherKey:="FoodId")>  _
	Public Property RecipeHeaders() As EntitySet(Of RecipeHeader)
		Get
			Return Me._RecipeHeaders
		End Get
		Set
			Me._RecipeHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_SellingDetail", Storage:="_SellingDetails", ThisKey:="FoodId", OtherKey:="FoodId")>  _
	Public Property SellingDetails() As EntitySet(Of SellingDetail)
		Get
			Return Me._SellingDetails
		End Get
		Set
			Me._SellingDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductionDetails(ByVal entity As ProductionDetail)
		Me.SendPropertyChanging
		entity.Food = Me
	End Sub
	
	Private Sub detach_ProductionDetails(ByVal entity As ProductionDetail)
		Me.SendPropertyChanging
		entity.Food = Nothing
	End Sub
	
	Private Sub attach_RecipeHeaders(ByVal entity As RecipeHeader)
		Me.SendPropertyChanging
		entity.Food = Me
	End Sub
	
	Private Sub detach_RecipeHeaders(ByVal entity As RecipeHeader)
		Me.SendPropertyChanging
		entity.Food = Nothing
	End Sub
	
	Private Sub attach_SellingDetails(ByVal entity As SellingDetail)
		Me.SendPropertyChanging
		entity.Food = Me
	End Sub
	
	Private Sub detach_SellingDetails(ByVal entity As SellingDetail)
		Me.SendPropertyChanging
		entity.Food = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomingRawMaterialDetail")>  _
Partial Public Class IncomingRawMaterialDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IncomingRawMaterialId As Integer
	
	Private _RawMaterialId As Integer
	
	Private _BestBeforeDate As Date
	
	Private _WeightInGram As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnBestBeforeDateChanging(value As Date)
    End Sub
    Partial Private Sub OnBestBeforeDateChanged()
    End Sub
    Partial Private Sub OnWeightInGramChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeightInGramChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncomingRawMaterialId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IncomingRawMaterialId() As Integer
		Get
			Return Me._IncomingRawMaterialId
		End Get
		Set
			If ((Me._IncomingRawMaterialId = value)  _
						= false) Then
				Me.OnIncomingRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._IncomingRawMaterialId = value
				Me.SendPropertyChanged("IncomingRawMaterialId")
				Me.OnIncomingRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RawMaterialId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RawMaterialId() As Integer
		Get
			Return Me._RawMaterialId
		End Get
		Set
			If ((Me._RawMaterialId = value)  _
						= false) Then
				Me.OnRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._RawMaterialId = value
				Me.SendPropertyChanged("RawMaterialId")
				Me.OnRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BestBeforeDate", DbType:="Date NOT NULL")>  _
	Public Property BestBeforeDate() As Date
		Get
			Return Me._BestBeforeDate
		End Get
		Set
			If ((Me._BestBeforeDate = value)  _
						= false) Then
				Me.OnBestBeforeDateChanging(value)
				Me.SendPropertyChanging
				Me._BestBeforeDate = value
				Me.SendPropertyChanged("BestBeforeDate")
				Me.OnBestBeforeDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightInGram", DbType:="Int NOT NULL")>  _
	Public Property WeightInGram() As Integer
		Get
			Return Me._WeightInGram
		End Get
		Set
			If ((Me._WeightInGram = value)  _
						= false) Then
				Me.OnWeightInGramChanging(value)
				Me.SendPropertyChanging
				Me._WeightInGram = value
				Me.SendPropertyChanged("WeightInGram")
				Me.OnWeightInGramChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.IncomingRawMaterialHeader")>  _
Partial Public Class IncomingRawMaterialHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _IncomingRawMaterialId As Integer
	
	Private _IncomingDate As Date
	
	Private _EmployeeId As Integer
	
	Private _Description As String
	
	Private _RawMaterialIntakes As EntitySet(Of RawMaterialIntake)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnIncomingDateChanging(value As Date)
    End Sub
    Partial Private Sub OnIncomingDateChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RawMaterialIntakes = New EntitySet(Of RawMaterialIntake)(AddressOf Me.attach_RawMaterialIntakes, AddressOf Me.detach_RawMaterialIntakes)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncomingRawMaterialId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property IncomingRawMaterialId() As Integer
		Get
			Return Me._IncomingRawMaterialId
		End Get
		Set
			If ((Me._IncomingRawMaterialId = value)  _
						= false) Then
				Me.OnIncomingRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._IncomingRawMaterialId = value
				Me.SendPropertyChanged("IncomingRawMaterialId")
				Me.OnIncomingRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncomingDate", DbType:="Date NOT NULL")>  _
	Public Property IncomingDate() As Date
		Get
			Return Me._IncomingDate
		End Get
		Set
			If ((Me._IncomingDate = value)  _
						= false) Then
				Me.OnIncomingDateChanging(value)
				Me.SendPropertyChanging
				Me._IncomingDate = value
				Me.SendPropertyChanged("IncomingDate")
				Me.OnIncomingDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomingRawMaterialHeader_RawMaterialIntake", Storage:="_RawMaterialIntakes", ThisKey:="IncomingRawMaterialId", OtherKey:="IncomingRawMaterialId")>  _
	Public Property RawMaterialIntakes() As EntitySet(Of RawMaterialIntake)
		Get
			Return Me._RawMaterialIntakes
		End Get
		Set
			Me._RawMaterialIntakes.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RawMaterialIntakes(ByVal entity As RawMaterialIntake)
		Me.SendPropertyChanging
		entity.IncomingRawMaterialHeader = Me
	End Sub
	
	Private Sub detach_RawMaterialIntakes(ByVal entity As RawMaterialIntake)
		Me.SendPropertyChanging
		entity.IncomingRawMaterialHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductionDetail")>  _
Partial Public Class ProductionDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductionId As Integer
	
	Private _BatchNumber As Integer
	
	Private _FoodId As Integer
	
	Private _ProductionOutputQty As Integer
	
	Private _ExpiredDate As Date
	
	Private _Food As EntityRef(Of Food)
	
	Private _ProductionHeader As EntityRef(Of ProductionHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductionIdChanged()
    End Sub
    Partial Private Sub OnBatchNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnBatchNumberChanged()
    End Sub
    Partial Private Sub OnFoodIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFoodIdChanged()
    End Sub
    Partial Private Sub OnProductionOutputQtyChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductionOutputQtyChanged()
    End Sub
    Partial Private Sub OnExpiredDateChanging(value As Date)
    End Sub
    Partial Private Sub OnExpiredDateChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Food = CType(Nothing, EntityRef(Of Food))
		Me._ProductionHeader = CType(Nothing, EntityRef(Of ProductionHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductionId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property ProductionId() As Integer
		Get
			Return Me._ProductionId
		End Get
		Set
			If ((Me._ProductionId = value)  _
						= false) Then
				If Me._ProductionHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnProductionIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductionId = value
				Me.SendPropertyChanged("ProductionId")
				Me.OnProductionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property BatchNumber() As Integer
		Get
			Return Me._BatchNumber
		End Get
		Set
			If ((Me._BatchNumber = value)  _
						= false) Then
				Me.OnBatchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BatchNumber = value
				Me.SendPropertyChanged("BatchNumber")
				Me.OnBatchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FoodId() As Integer
		Get
			Return Me._FoodId
		End Get
		Set
			If ((Me._FoodId = value)  _
						= false) Then
				If Me._Food.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFoodIdChanging(value)
				Me.SendPropertyChanging
				Me._FoodId = value
				Me.SendPropertyChanged("FoodId")
				Me.OnFoodIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductionOutputQty", DbType:="Int NOT NULL")>  _
	Public Property ProductionOutputQty() As Integer
		Get
			Return Me._ProductionOutputQty
		End Get
		Set
			If ((Me._ProductionOutputQty = value)  _
						= false) Then
				Me.OnProductionOutputQtyChanging(value)
				Me.SendPropertyChanging
				Me._ProductionOutputQty = value
				Me.SendPropertyChanged("ProductionOutputQty")
				Me.OnProductionOutputQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ExpiredDate", DbType:="Date NOT NULL")>  _
	Public Property ExpiredDate() As Date
		Get
			Return Me._ExpiredDate
		End Get
		Set
			If ((Me._ExpiredDate = value)  _
						= false) Then
				Me.OnExpiredDateChanging(value)
				Me.SendPropertyChanging
				Me._ExpiredDate = value
				Me.SendPropertyChanged("ExpiredDate")
				Me.OnExpiredDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_ProductionDetail", Storage:="_Food", ThisKey:="FoodId", OtherKey:="FoodId", IsForeignKey:=true)>  _
	Public Property Food() As Food
		Get
			Return Me._Food.Entity
		End Get
		Set
			Dim previousValue As Food = Me._Food.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Food.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Food.Entity = Nothing
					previousValue.ProductionDetails.Remove(Me)
				End If
				Me._Food.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductionDetails.Add(Me)
					Me._FoodId = value.FoodId
				Else
					Me._FoodId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Food")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductionHeader_ProductionDetail", Storage:="_ProductionHeader", ThisKey:="ProductionId", OtherKey:="ProductionId", IsForeignKey:=true)>  _
	Public Property ProductionHeader() As ProductionHeader
		Get
			Return Me._ProductionHeader.Entity
		End Get
		Set
			Dim previousValue As ProductionHeader = Me._ProductionHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._ProductionHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._ProductionHeader.Entity = Nothing
					previousValue.ProductionDetails.Remove(Me)
				End If
				Me._ProductionHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductionDetails.Add(Me)
					Me._ProductionId = value.ProductionId
				Else
					Me._ProductionId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("ProductionHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.ProductionHeader")>  _
Partial Public Class ProductionHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _ProductionId As Integer
	
	Private _ProductionDate As Date
	
	Private _Description As String
	
	Private _EmployeeId As Integer
	
	Private _Status As Char
	
	Private _ProductionDetails As EntitySet(Of ProductionDetail)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnProductionIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnProductionIdChanged()
    End Sub
    Partial Private Sub OnProductionDateChanging(value As Date)
    End Sub
    Partial Private Sub OnProductionDateChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Char)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._ProductionDetails = New EntitySet(Of ProductionDetail)(AddressOf Me.attach_ProductionDetails, AddressOf Me.detach_ProductionDetails)
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductionId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property ProductionId() As Integer
		Get
			Return Me._ProductionId
		End Get
		Set
			If ((Me._ProductionId = value)  _
						= false) Then
				Me.OnProductionIdChanging(value)
				Me.SendPropertyChanging
				Me._ProductionId = value
				Me.SendPropertyChanged("ProductionId")
				Me.OnProductionIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_ProductionDate", DbType:="Date NOT NULL")>  _
	Public Property ProductionDate() As Date
		Get
			Return Me._ProductionDate
		End Get
		Set
			If ((Me._ProductionDate = value)  _
						= false) Then
				Me.OnProductionDateChanging(value)
				Me.SendPropertyChanging
				Me._ProductionDate = value
				Me.SendPropertyChanged("ProductionDate")
				Me.OnProductionDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Char(1) NOT NULL")>  _
	Public Property Status() As Char
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="ProductionHeader_ProductionDetail", Storage:="_ProductionDetails", ThisKey:="ProductionId", OtherKey:="ProductionId")>  _
	Public Property ProductionDetails() As EntitySet(Of ProductionDetail)
		Get
			Return Me._ProductionDetails
		End Get
		Set
			Me._ProductionDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_ProductionHeader", Storage:="_Employee", ThisKey:="EmployeeId", OtherKey:="EmployeeId", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.ProductionHeaders.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.ProductionHeaders.Add(Me)
					Me._EmployeeId = value.EmployeeId
				Else
					Me._EmployeeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_ProductionDetails(ByVal entity As ProductionDetail)
		Me.SendPropertyChanging
		entity.ProductionHeader = Me
	End Sub
	
	Private Sub detach_ProductionDetails(ByVal entity As ProductionDetail)
		Me.SendPropertyChanging
		entity.ProductionHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RawMaterial")>  _
Partial Public Class RawMaterial
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RawMaterialId As Integer
	
	Private _RawMaterialName As String
	
	Private _Description As String
	
	Private _EmployeeId As Integer
	
	Private _InputedDate As Date
	
	Private _Status As Char
	
	Private _RawMaterialIntakes As EntitySet(Of RawMaterialIntake)
	
	Private _RecipeDetails As EntitySet(Of RecipeDetail)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnRawMaterialNameChanging(value As String)
    End Sub
    Partial Private Sub OnRawMaterialNameChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnInputedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnInputedDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Char)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RawMaterialIntakes = New EntitySet(Of RawMaterialIntake)(AddressOf Me.attach_RawMaterialIntakes, AddressOf Me.detach_RawMaterialIntakes)
		Me._RecipeDetails = New EntitySet(Of RecipeDetail)(AddressOf Me.attach_RecipeDetails, AddressOf Me.detach_RecipeDetails)
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RawMaterialId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RawMaterialId() As Integer
		Get
			Return Me._RawMaterialId
		End Get
		Set
			If ((Me._RawMaterialId = value)  _
						= false) Then
				Me.OnRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._RawMaterialId = value
				Me.SendPropertyChanged("RawMaterialId")
				Me.OnRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RawMaterialName", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property RawMaterialName() As String
		Get
			Return Me._RawMaterialName
		End Get
		Set
			If (String.Equals(Me._RawMaterialName, value) = false) Then
				Me.OnRawMaterialNameChanging(value)
				Me.SendPropertyChanging
				Me._RawMaterialName = value
				Me.SendPropertyChanged("RawMaterialName")
				Me.OnRawMaterialNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_InputedDate", DbType:="Date NOT NULL")>  _
	Public Property InputedDate() As Date
		Get
			Return Me._InputedDate
		End Get
		Set
			If ((Me._InputedDate = value)  _
						= false) Then
				Me.OnInputedDateChanging(value)
				Me.SendPropertyChanging
				Me._InputedDate = value
				Me.SendPropertyChanged("InputedDate")
				Me.OnInputedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Char(1) NOT NULL")>  _
	Public Property Status() As Char
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RawMaterial_RawMaterialIntake", Storage:="_RawMaterialIntakes", ThisKey:="RawMaterialId", OtherKey:="RawMaterialId")>  _
	Public Property RawMaterialIntakes() As EntitySet(Of RawMaterialIntake)
		Get
			Return Me._RawMaterialIntakes
		End Get
		Set
			Me._RawMaterialIntakes.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RawMaterial_RecipeDetail", Storage:="_RecipeDetails", ThisKey:="RawMaterialId", OtherKey:="RawMaterialId")>  _
	Public Property RecipeDetails() As EntitySet(Of RecipeDetail)
		Get
			Return Me._RecipeDetails
		End Get
		Set
			Me._RecipeDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_RawMaterial", Storage:="_Employee", ThisKey:="EmployeeId", OtherKey:="EmployeeId", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.RawMaterials.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RawMaterials.Add(Me)
					Me._EmployeeId = value.EmployeeId
				Else
					Me._EmployeeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RawMaterialIntakes(ByVal entity As RawMaterialIntake)
		Me.SendPropertyChanging
		entity.RawMaterial = Me
	End Sub
	
	Private Sub detach_RawMaterialIntakes(ByVal entity As RawMaterialIntake)
		Me.SendPropertyChanging
		entity.RawMaterial = Nothing
	End Sub
	
	Private Sub attach_RecipeDetails(ByVal entity As RecipeDetail)
		Me.SendPropertyChanging
		entity.RawMaterial = Me
	End Sub
	
	Private Sub detach_RecipeDetails(ByVal entity As RecipeDetail)
		Me.SendPropertyChanging
		entity.RawMaterial = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RawMaterialIntake")>  _
Partial Public Class RawMaterialIntake
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _BatchNumber As Integer
	
	Private _RawMaterialId As Integer
	
	Private _IncomingRawMaterialId As Integer
	
	Private _WeightInGram As Integer
	
	Private _IncomingRawMaterialHeader As EntityRef(Of IncomingRawMaterialHeader)
	
	Private _RawMaterial As EntityRef(Of RawMaterial)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnBatchNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnBatchNumberChanged()
    End Sub
    Partial Private Sub OnRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIncomingRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnWeightInGramChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeightInGramChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._IncomingRawMaterialHeader = CType(Nothing, EntityRef(Of IncomingRawMaterialHeader))
		Me._RawMaterial = CType(Nothing, EntityRef(Of RawMaterial))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BatchNumber() As Integer
		Get
			Return Me._BatchNumber
		End Get
		Set
			If ((Me._BatchNumber = value)  _
						= false) Then
				Me.OnBatchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BatchNumber = value
				Me.SendPropertyChanged("BatchNumber")
				Me.OnBatchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RawMaterialId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RawMaterialId() As Integer
		Get
			Return Me._RawMaterialId
		End Get
		Set
			If ((Me._RawMaterialId = value)  _
						= false) Then
				If Me._RawMaterial.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._RawMaterialId = value
				Me.SendPropertyChanged("RawMaterialId")
				Me.OnRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IncomingRawMaterialId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property IncomingRawMaterialId() As Integer
		Get
			Return Me._IncomingRawMaterialId
		End Get
		Set
			If ((Me._IncomingRawMaterialId = value)  _
						= false) Then
				If Me._IncomingRawMaterialHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIncomingRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._IncomingRawMaterialId = value
				Me.SendPropertyChanged("IncomingRawMaterialId")
				Me.OnIncomingRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightInGram", DbType:="Int NOT NULL")>  _
	Public Property WeightInGram() As Integer
		Get
			Return Me._WeightInGram
		End Get
		Set
			If ((Me._WeightInGram = value)  _
						= false) Then
				Me.OnWeightInGramChanging(value)
				Me.SendPropertyChanging
				Me._WeightInGram = value
				Me.SendPropertyChanged("WeightInGram")
				Me.OnWeightInGramChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="IncomingRawMaterialHeader_RawMaterialIntake", Storage:="_IncomingRawMaterialHeader", ThisKey:="IncomingRawMaterialId", OtherKey:="IncomingRawMaterialId", IsForeignKey:=true)>  _
	Public Property IncomingRawMaterialHeader() As IncomingRawMaterialHeader
		Get
			Return Me._IncomingRawMaterialHeader.Entity
		End Get
		Set
			Dim previousValue As IncomingRawMaterialHeader = Me._IncomingRawMaterialHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._IncomingRawMaterialHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._IncomingRawMaterialHeader.Entity = Nothing
					previousValue.RawMaterialIntakes.Remove(Me)
				End If
				Me._IncomingRawMaterialHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RawMaterialIntakes.Add(Me)
					Me._IncomingRawMaterialId = value.IncomingRawMaterialId
				Else
					Me._IncomingRawMaterialId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("IncomingRawMaterialHeader")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RawMaterial_RawMaterialIntake", Storage:="_RawMaterial", ThisKey:="RawMaterialId", OtherKey:="RawMaterialId", IsForeignKey:=true)>  _
	Public Property RawMaterial() As RawMaterial
		Get
			Return Me._RawMaterial.Entity
		End Get
		Set
			Dim previousValue As RawMaterial = Me._RawMaterial.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RawMaterial.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RawMaterial.Entity = Nothing
					previousValue.RawMaterialIntakes.Remove(Me)
				End If
				Me._RawMaterial.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RawMaterialIntakes.Add(Me)
					Me._RawMaterialId = value.RawMaterialId
				Else
					Me._RawMaterialId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RawMaterial")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecipeDetail")>  _
Partial Public Class RecipeDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecipeId As Integer
	
	Private _RawMaterialId As Integer
	
	Private _WeightInGram As Integer
	
	Private _RawMaterial As EntityRef(Of RawMaterial)
	
	Private _RecipeHeader As EntityRef(Of RecipeHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecipeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecipeIdChanged()
    End Sub
    Partial Private Sub OnRawMaterialIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRawMaterialIdChanged()
    End Sub
    Partial Private Sub OnWeightInGramChanging(value As Integer)
    End Sub
    Partial Private Sub OnWeightInGramChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RawMaterial = CType(Nothing, EntityRef(Of RawMaterial))
		Me._RecipeHeader = CType(Nothing, EntityRef(Of RecipeHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecipeId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RecipeId() As Integer
		Get
			Return Me._RecipeId
		End Get
		Set
			If ((Me._RecipeId = value)  _
						= false) Then
				If Me._RecipeHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRecipeIdChanging(value)
				Me.SendPropertyChanging
				Me._RecipeId = value
				Me.SendPropertyChanged("RecipeId")
				Me.OnRecipeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RawMaterialId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property RawMaterialId() As Integer
		Get
			Return Me._RawMaterialId
		End Get
		Set
			If ((Me._RawMaterialId = value)  _
						= false) Then
				If Me._RawMaterial.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnRawMaterialIdChanging(value)
				Me.SendPropertyChanging
				Me._RawMaterialId = value
				Me.SendPropertyChanged("RawMaterialId")
				Me.OnRawMaterialIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_WeightInGram", DbType:="Int NOT NULL")>  _
	Public Property WeightInGram() As Integer
		Get
			Return Me._WeightInGram
		End Get
		Set
			If ((Me._WeightInGram = value)  _
						= false) Then
				Me.OnWeightInGramChanging(value)
				Me.SendPropertyChanging
				Me._WeightInGram = value
				Me.SendPropertyChanged("WeightInGram")
				Me.OnWeightInGramChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RawMaterial_RecipeDetail", Storage:="_RawMaterial", ThisKey:="RawMaterialId", OtherKey:="RawMaterialId", IsForeignKey:=true)>  _
	Public Property RawMaterial() As RawMaterial
		Get
			Return Me._RawMaterial.Entity
		End Get
		Set
			Dim previousValue As RawMaterial = Me._RawMaterial.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RawMaterial.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RawMaterial.Entity = Nothing
					previousValue.RecipeDetails.Remove(Me)
				End If
				Me._RawMaterial.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecipeDetails.Add(Me)
					Me._RawMaterialId = value.RawMaterialId
				Else
					Me._RawMaterialId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RawMaterial")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RecipeHeader_RecipeDetail", Storage:="_RecipeHeader", ThisKey:="RecipeId", OtherKey:="RecipeId", IsForeignKey:=true)>  _
	Public Property RecipeHeader() As RecipeHeader
		Get
			Return Me._RecipeHeader.Entity
		End Get
		Set
			Dim previousValue As RecipeHeader = Me._RecipeHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._RecipeHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._RecipeHeader.Entity = Nothing
					previousValue.RecipeDetails.Remove(Me)
				End If
				Me._RecipeHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecipeDetails.Add(Me)
					Me._RecipeId = value.RecipeId
				Else
					Me._RecipeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("RecipeHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.RecipeHeader")>  _
Partial Public Class RecipeHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _RecipeId As Integer
	
	Private _FoodId As Integer
	
	Private _OutputUnitInPieces As Integer
	
	Private _Description As String
	
	Private _EmployeeId As Integer
	
	Private _CreatedDate As Date
	
	Private _Status As Char
	
	Private _RecipeDetails As EntitySet(Of RecipeDetail)
	
	Private _Employee As EntityRef(Of Employee)
	
	Private _Food As EntityRef(Of Food)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnRecipeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnRecipeIdChanged()
    End Sub
    Partial Private Sub OnFoodIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFoodIdChanged()
    End Sub
    Partial Private Sub OnOutputUnitInPiecesChanging(value As Integer)
    End Sub
    Partial Private Sub OnOutputUnitInPiecesChanged()
    End Sub
    Partial Private Sub OnDescriptionChanging(value As String)
    End Sub
    Partial Private Sub OnDescriptionChanged()
    End Sub
    Partial Private Sub OnEmployeeIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnEmployeeIdChanged()
    End Sub
    Partial Private Sub OnCreatedDateChanging(value As Date)
    End Sub
    Partial Private Sub OnCreatedDateChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As Char)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._RecipeDetails = New EntitySet(Of RecipeDetail)(AddressOf Me.attach_RecipeDetails, AddressOf Me.detach_RecipeDetails)
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		Me._Food = CType(Nothing, EntityRef(Of Food))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_RecipeId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property RecipeId() As Integer
		Get
			Return Me._RecipeId
		End Get
		Set
			If ((Me._RecipeId = value)  _
						= false) Then
				Me.OnRecipeIdChanging(value)
				Me.SendPropertyChanging
				Me._RecipeId = value
				Me.SendPropertyChanged("RecipeId")
				Me.OnRecipeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodId", DbType:="Int NOT NULL")>  _
	Public Property FoodId() As Integer
		Get
			Return Me._FoodId
		End Get
		Set
			If ((Me._FoodId = value)  _
						= false) Then
				If Me._Food.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFoodIdChanging(value)
				Me.SendPropertyChanging
				Me._FoodId = value
				Me.SendPropertyChanged("FoodId")
				Me.OnFoodIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_OutputUnitInPieces", DbType:="Int NOT NULL")>  _
	Public Property OutputUnitInPieces() As Integer
		Get
			Return Me._OutputUnitInPieces
		End Get
		Set
			If ((Me._OutputUnitInPieces = value)  _
						= false) Then
				Me.OnOutputUnitInPiecesChanging(value)
				Me.SendPropertyChanging
				Me._OutputUnitInPieces = value
				Me.SendPropertyChanged("OutputUnitInPieces")
				Me.OnOutputUnitInPiecesChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Description", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Description() As String
		Get
			Return Me._Description
		End Get
		Set
			If (String.Equals(Me._Description, value) = false) Then
				Me.OnDescriptionChanging(value)
				Me.SendPropertyChanging
				Me._Description = value
				Me.SendPropertyChanged("Description")
				Me.OnDescriptionChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EmployeeId", DbType:="Int NOT NULL")>  _
	Public Property EmployeeId() As Integer
		Get
			Return Me._EmployeeId
		End Get
		Set
			If ((Me._EmployeeId = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnEmployeeIdChanging(value)
				Me.SendPropertyChanging
				Me._EmployeeId = value
				Me.SendPropertyChanged("EmployeeId")
				Me.OnEmployeeIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CreatedDate", DbType:="Date NOT NULL")>  _
	Public Property CreatedDate() As Date
		Get
			Return Me._CreatedDate
		End Get
		Set
			If ((Me._CreatedDate = value)  _
						= false) Then
				Me.OnCreatedDateChanging(value)
				Me.SendPropertyChanging
				Me._CreatedDate = value
				Me.SendPropertyChanged("CreatedDate")
				Me.OnCreatedDateChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="Char(1) NOT NULL")>  _
	Public Property Status() As Char
		Get
			Return Me._Status
		End Get
		Set
			If ((Me._Status = value)  _
						= false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="RecipeHeader_RecipeDetail", Storage:="_RecipeDetails", ThisKey:="RecipeId", OtherKey:="RecipeId")>  _
	Public Property RecipeDetails() As EntitySet(Of RecipeDetail)
		Get
			Return Me._RecipeDetails
		End Get
		Set
			Me._RecipeDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_RecipeHeader", Storage:="_Employee", ThisKey:="EmployeeId", OtherKey:="EmployeeId", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.RecipeHeaders.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecipeHeaders.Add(Me)
					Me._EmployeeId = value.EmployeeId
				Else
					Me._EmployeeId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_RecipeHeader", Storage:="_Food", ThisKey:="FoodId", OtherKey:="FoodId", IsForeignKey:=true)>  _
	Public Property Food() As Food
		Get
			Return Me._Food.Entity
		End Get
		Set
			Dim previousValue As Food = Me._Food.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Food.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Food.Entity = Nothing
					previousValue.RecipeHeaders.Remove(Me)
				End If
				Me._Food.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.RecipeHeaders.Add(Me)
					Me._FoodId = value.FoodId
				Else
					Me._FoodId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Food")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_RecipeDetails(ByVal entity As RecipeDetail)
		Me.SendPropertyChanging
		entity.RecipeHeader = Me
	End Sub
	
	Private Sub detach_RecipeDetails(ByVal entity As RecipeDetail)
		Me.SendPropertyChanging
		entity.RecipeHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.SellingDetail")>  _
Partial Public Class SellingDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _SellingId As Integer
	
	Private _FoodId As Integer
	
	Private _BatchNumber As Integer
	
	Private _Qty As Integer
	
	Private _Price As Integer
	
	Private _Food As EntityRef(Of Food)
	
	Private _SellingHeader As EntityRef(Of SellingHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnSellingIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnSellingIdChanged()
    End Sub
    Partial Private Sub OnFoodIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnFoodIdChanged()
    End Sub
    Partial Private Sub OnBatchNumberChanging(value As Integer)
    End Sub
    Partial Private Sub OnBatchNumberChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As Integer)
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Food = CType(Nothing, EntityRef(Of Food))
		Me._SellingHeader = CType(Nothing, EntityRef(Of SellingHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_SellingId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property SellingId() As Integer
		Get
			Return Me._SellingId
		End Get
		Set
			If ((Me._SellingId = value)  _
						= false) Then
				If Me._SellingHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnSellingIdChanging(value)
				Me.SendPropertyChanging
				Me._SellingId = value
				Me.SendPropertyChanged("SellingId")
				Me.OnSellingIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_FoodId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property FoodId() As Integer
		Get
			Return Me._FoodId
		End Get
		Set
			If ((Me._FoodId = value)  _
						= false) Then
				If Me._Food.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnFoodIdChanging(value)
				Me.SendPropertyChanging
				Me._FoodId = value
				Me.SendPropertyChanged("FoodId")
				Me.OnFoodIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_BatchNumber", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property BatchNumber() As Integer
		Get
			Return Me._BatchNumber
		End Get
		Set
			If ((Me._BatchNumber = value)  _
						= false) Then
				Me.OnBatchNumberChanging(value)
				Me.SendPropertyChanging
				Me._BatchNumber = value
				Me.SendPropertyChanged("BatchNumber")
				Me.OnBatchNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Int NOT NULL")>  _
	Public Property Qty() As Integer
		Get
			Return Me._Qty
		End Get
		Set
			If ((Me._Qty = value)  _
						= false) Then
				Me.OnQtyChanging(value)
				Me.SendPropertyChanging
				Me._Qty = value
				Me.SendPropertyChanged("Qty")
				Me.OnQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int NOT NULL")>  _
	Public Property Price() As Integer
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Food_SellingDetail", Storage:="_Food", ThisKey:="FoodId", OtherKey:="FoodId", IsForeignKey:=true)>  _
	Public Property Food() As Food
		Get
			Return Me._Food.Entity
		End Get
		Set
			Dim previousValue As Food = Me._Food.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Food.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Food.Entity = Nothing
					previousValue.SellingDetails.Remove(Me)
				End If
				Me._Food.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SellingDetails.Add(Me)
					Me._FoodId = value.FoodId
				Else
					Me._FoodId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Food")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="SellingHeader_SellingDetail", Storage:="_SellingHeader", ThisKey:="SellingId", OtherKey:="SellingId", IsForeignKey:=true)>  _
	Public Property SellingHeader() As SellingHeader
		Get
			Return Me._SellingHeader.Entity
		End Get
		Set
			Dim previousValue As SellingHeader = Me._SellingHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._SellingHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._SellingHeader.Entity = Nothing
					previousValue.SellingDetails.Remove(Me)
				End If
				Me._SellingHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.SellingDetails.Add(Me)
					Me._SellingId = value.SellingId
				Else
					Me._SellingId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("SellingHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
