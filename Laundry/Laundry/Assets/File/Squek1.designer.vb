'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="Laundry")>  _
Partial Public Class SquekDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertCategory(instance As Category)
    End Sub
  Partial Private Sub UpdateCategory(instance As Category)
    End Sub
  Partial Private Sub DeleteCategory(instance As Category)
    End Sub
  Partial Private Sub InsertUnit(instance As Unit)
    End Sub
  Partial Private Sub UpdateUnit(instance As Unit)
    End Sub
  Partial Private Sub DeleteUnit(instance As Unit)
    End Sub
  Partial Private Sub InsertCustomer(instance As Customer)
    End Sub
  Partial Private Sub UpdateCustomer(instance As Customer)
    End Sub
  Partial Private Sub DeleteCustomer(instance As Customer)
    End Sub
  Partial Private Sub InsertDetailDeposit(instance As DetailDeposit)
    End Sub
  Partial Private Sub UpdateDetailDeposit(instance As DetailDeposit)
    End Sub
  Partial Private Sub DeleteDetailDeposit(instance As DetailDeposit)
    End Sub
  Partial Private Sub InsertEmployee(instance As Employee)
    End Sub
  Partial Private Sub UpdateEmployee(instance As Employee)
    End Sub
  Partial Private Sub DeleteEmployee(instance As Employee)
    End Sub
  Partial Private Sub InsertHeaderDeposit(instance As HeaderDeposit)
    End Sub
  Partial Private Sub UpdateHeaderDeposit(instance As HeaderDeposit)
    End Sub
  Partial Private Sub DeleteHeaderDeposit(instance As HeaderDeposit)
    End Sub
  Partial Private Sub InsertJob(instance As Job)
    End Sub
  Partial Private Sub UpdateJob(instance As Job)
    End Sub
  Partial Private Sub DeleteJob(instance As Job)
    End Sub
  Partial Private Sub InsertPackage(instance As Package)
    End Sub
  Partial Private Sub UpdatePackage(instance As Package)
    End Sub
  Partial Private Sub DeletePackage(instance As Package)
    End Sub
  Partial Private Sub InsertPrepaidPackage(instance As PrepaidPackage)
    End Sub
  Partial Private Sub UpdatePrepaidPackage(instance As PrepaidPackage)
    End Sub
  Partial Private Sub DeletePrepaidPackage(instance As PrepaidPackage)
    End Sub
  Partial Private Sub InsertService(instance As Service)
    End Sub
  Partial Private Sub UpdateService(instance As Service)
    End Sub
  Partial Private Sub DeleteService(instance As Service)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Laundry.My.MySettings.Default.LaundryConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Categories() As System.Data.Linq.Table(Of Category)
		Get
			Return Me.GetTable(Of Category)
		End Get
	End Property
	
	Public ReadOnly Property Units() As System.Data.Linq.Table(Of Unit)
		Get
			Return Me.GetTable(Of Unit)
		End Get
	End Property
	
	Public ReadOnly Property Customers() As System.Data.Linq.Table(Of Customer)
		Get
			Return Me.GetTable(Of Customer)
		End Get
	End Property
	
	Public ReadOnly Property DetailDeposits() As System.Data.Linq.Table(Of DetailDeposit)
		Get
			Return Me.GetTable(Of DetailDeposit)
		End Get
	End Property
	
	Public ReadOnly Property Employees() As System.Data.Linq.Table(Of Employee)
		Get
			Return Me.GetTable(Of Employee)
		End Get
	End Property
	
	Public ReadOnly Property HeaderDeposits() As System.Data.Linq.Table(Of HeaderDeposit)
		Get
			Return Me.GetTable(Of HeaderDeposit)
		End Get
	End Property
	
	Public ReadOnly Property Jobs() As System.Data.Linq.Table(Of Job)
		Get
			Return Me.GetTable(Of Job)
		End Get
	End Property
	
	Public ReadOnly Property Packages() As System.Data.Linq.Table(Of Package)
		Get
			Return Me.GetTable(Of Package)
		End Get
	End Property
	
	Public ReadOnly Property PrepaidPackages() As System.Data.Linq.Table(Of PrepaidPackage)
		Get
			Return Me.GetTable(Of PrepaidPackage)
		End Get
	End Property
	
	Public ReadOnly Property Services() As System.Data.Linq.Table(Of Service)
		Get
			Return Me.GetTable(Of Service)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Category")>  _
Partial Public Class Category
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Services As EntitySet(Of Service)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Services = New EntitySet(Of Service)(AddressOf Me.attach_Services, AddressOf Me.detach_Services)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Service", Storage:="_Services", ThisKey:="Id", OtherKey:="IdCategory")>  _
	Public Property Services() As EntitySet(Of Service)
		Get
			Return Me._Services
		End Get
		Set
			Me._Services.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Services(ByVal entity As Service)
		Me.SendPropertyChanging
		entity.Category = Me
	End Sub
	
	Private Sub detach_Services(ByVal entity As Service)
		Me.SendPropertyChanging
		entity.Category = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Unit")>  _
Partial Public Class Unit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Services As EntitySet(Of Service)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Services = New EntitySet(Of Service)(AddressOf Me.attach_Services, AddressOf Me.detach_Services)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Unit_Service", Storage:="_Services", ThisKey:="Id", OtherKey:="IdUnit")>  _
	Public Property Services() As EntitySet(Of Service)
		Get
			Return Me._Services
		End Get
		Set
			Me._Services.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Services(ByVal entity As Service)
		Me.SendPropertyChanging
		entity.Unit = Me
	End Sub
	
	Private Sub detach_Services(ByVal entity As Service)
		Me.SendPropertyChanging
		entity.Unit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Customer")>  _
Partial Public Class Customer
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _PhoneNumber As String
	
	Private _Address As String
	
	Private _HeaderDeposits As EntitySet(Of HeaderDeposit)
	
	Private _PrepaidPackages As EntitySet(Of PrepaidPackage)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HeaderDeposits = New EntitySet(Of HeaderDeposit)(AddressOf Me.attach_HeaderDeposits, AddressOf Me.detach_HeaderDeposits)
		Me._PrepaidPackages = New EntitySet(Of PrepaidPackage)(AddressOf Me.attach_PrepaidPackages, AddressOf Me.detach_PrepaidPackages)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_HeaderDeposit", Storage:="_HeaderDeposits", ThisKey:="Id", OtherKey:="IdCustomer")>  _
	Public Property HeaderDeposits() As EntitySet(Of HeaderDeposit)
		Get
			Return Me._HeaderDeposits
		End Get
		Set
			Me._HeaderDeposits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_PrepaidPackage", Storage:="_PrepaidPackages", ThisKey:="Id", OtherKey:="IdCustomer")>  _
	Public Property PrepaidPackages() As EntitySet(Of PrepaidPackage)
		Get
			Return Me._PrepaidPackages
		End Get
		Set
			Me._PrepaidPackages.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HeaderDeposits(ByVal entity As HeaderDeposit)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_HeaderDeposits(ByVal entity As HeaderDeposit)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
	
	Private Sub attach_PrepaidPackages(ByVal entity As PrepaidPackage)
		Me.SendPropertyChanging
		entity.Customer = Me
	End Sub
	
	Private Sub detach_PrepaidPackages(ByVal entity As PrepaidPackage)
		Me.SendPropertyChanging
		entity.Customer = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.DetailDeposit")>  _
Partial Public Class DetailDeposit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdDeposit As Integer
	
	Private _IdService As Integer
	
	Private _IdPrepaidPackage As System.Nullable(Of Integer)
	
	Private _PriceUnit As Integer
	
	Private _TotalUnit As Double
	
	Private _CompletedDatetime As System.Nullable(Of Date)
	
	Private _HeaderDeposit As EntityRef(Of HeaderDeposit)
	
	Private _PrepaidPackage As EntityRef(Of PrepaidPackage)
	
	Private _Service As EntityRef(Of Service)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdDepositChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdDepositChanged()
    End Sub
    Partial Private Sub OnIdServiceChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdServiceChanged()
    End Sub
    Partial Private Sub OnIdPrepaidPackageChanging(value As System.Nullable(Of Integer))
    End Sub
    Partial Private Sub OnIdPrepaidPackageChanged()
    End Sub
    Partial Private Sub OnPriceUnitChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceUnitChanged()
    End Sub
    Partial Private Sub OnTotalUnitChanging(value As Double)
    End Sub
    Partial Private Sub OnTotalUnitChanged()
    End Sub
    Partial Private Sub OnCompletedDatetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletedDatetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HeaderDeposit = CType(Nothing, EntityRef(Of HeaderDeposit))
		Me._PrepaidPackage = CType(Nothing, EntityRef(Of PrepaidPackage))
		Me._Service = CType(Nothing, EntityRef(Of Service))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdDeposit", DbType:="Int NOT NULL")>  _
	Public Property IdDeposit() As Integer
		Get
			Return Me._IdDeposit
		End Get
		Set
			If ((Me._IdDeposit = value)  _
						= false) Then
				If Me._HeaderDeposit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdDepositChanging(value)
				Me.SendPropertyChanging
				Me._IdDeposit = value
				Me.SendPropertyChanged("IdDeposit")
				Me.OnIdDepositChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdService", DbType:="Int NOT NULL")>  _
	Public Property IdService() As Integer
		Get
			Return Me._IdService
		End Get
		Set
			If ((Me._IdService = value)  _
						= false) Then
				If Me._Service.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServiceChanging(value)
				Me.SendPropertyChanging
				Me._IdService = value
				Me.SendPropertyChanged("IdService")
				Me.OnIdServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPrepaidPackage", DbType:="Int")>  _
	Public Property IdPrepaidPackage() As System.Nullable(Of Integer)
		Get
			Return Me._IdPrepaidPackage
		End Get
		Set
			If (Me._IdPrepaidPackage.Equals(value) = false) Then
				If Me._PrepaidPackage.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPrepaidPackageChanging(value)
				Me.SendPropertyChanging
				Me._IdPrepaidPackage = value
				Me.SendPropertyChanged("IdPrepaidPackage")
				Me.OnIdPrepaidPackageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceUnit", DbType:="Int NOT NULL")>  _
	Public Property PriceUnit() As Integer
		Get
			Return Me._PriceUnit
		End Get
		Set
			If ((Me._PriceUnit = value)  _
						= false) Then
				Me.OnPriceUnitChanging(value)
				Me.SendPropertyChanging
				Me._PriceUnit = value
				Me.SendPropertyChanged("PriceUnit")
				Me.OnPriceUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnit", DbType:="Float NOT NULL")>  _
	Public Property TotalUnit() As Double
		Get
			Return Me._TotalUnit
		End Get
		Set
			If ((Me._TotalUnit = value)  _
						= false) Then
				Me.OnTotalUnitChanging(value)
				Me.SendPropertyChanging
				Me._TotalUnit = value
				Me.SendPropertyChanged("TotalUnit")
				Me.OnTotalUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedDatetime", DbType:="DateTime")>  _
	Public Property CompletedDatetime() As System.Nullable(Of Date)
		Get
			Return Me._CompletedDatetime
		End Get
		Set
			If (Me._CompletedDatetime.Equals(value) = false) Then
				Me.OnCompletedDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._CompletedDatetime = value
				Me.SendPropertyChanged("CompletedDatetime")
				Me.OnCompletedDatetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HeaderDeposit_DetailDeposit", Storage:="_HeaderDeposit", ThisKey:="IdDeposit", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property HeaderDeposit() As HeaderDeposit
		Get
			Return Me._HeaderDeposit.Entity
		End Get
		Set
			Dim previousValue As HeaderDeposit = Me._HeaderDeposit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._HeaderDeposit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._HeaderDeposit.Entity = Nothing
					previousValue.DetailDeposits.Remove(Me)
				End If
				Me._HeaderDeposit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetailDeposits.Add(Me)
					Me._IdDeposit = value.Id
				Else
					Me._IdDeposit = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("HeaderDeposit")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PrepaidPackage_DetailDeposit", Storage:="_PrepaidPackage", ThisKey:="IdPrepaidPackage", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property PrepaidPackage() As PrepaidPackage
		Get
			Return Me._PrepaidPackage.Entity
		End Get
		Set
			Dim previousValue As PrepaidPackage = Me._PrepaidPackage.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PrepaidPackage.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PrepaidPackage.Entity = Nothing
					previousValue.DetailDeposits.Remove(Me)
				End If
				Me._PrepaidPackage.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetailDeposits.Add(Me)
					Me._IdPrepaidPackage = value.Id
				Else
					Me._IdPrepaidPackage = CType(Nothing, Nullable(Of Integer))
				End If
				Me.SendPropertyChanged("PrepaidPackage")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_DetailDeposit", Storage:="_Service", ThisKey:="IdService", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Service() As Service
		Get
			Return Me._Service.Entity
		End Get
		Set
			Dim previousValue As Service = Me._Service.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Service.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Service.Entity = Nothing
					previousValue.DetailDeposits.Remove(Me)
				End If
				Me._Service.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.DetailDeposits.Add(Me)
					Me._IdService = value.Id
				Else
					Me._IdService = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Service")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Employee")>  _
Partial Public Class Employee
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Password As String
	
	Private _Name As String
	
	Private _Email As String
	
	Private _Address As String
	
	Private _PhoneNumber As String
	
	Private _DateofBirth As Date
	
	Private _IdJob As Integer
	
	Private _Salary As Decimal
	
	Private _HeaderDeposits As EntitySet(Of HeaderDeposit)
	
	Private _Job As EntityRef(Of Job)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnEmailChanging(value As String)
    End Sub
    Partial Private Sub OnEmailChanged()
    End Sub
    Partial Private Sub OnAddressChanging(value As String)
    End Sub
    Partial Private Sub OnAddressChanged()
    End Sub
    Partial Private Sub OnPhoneNumberChanging(value As String)
    End Sub
    Partial Private Sub OnPhoneNumberChanged()
    End Sub
    Partial Private Sub OnDateofBirthChanging(value As Date)
    End Sub
    Partial Private Sub OnDateofBirthChanged()
    End Sub
    Partial Private Sub OnIdJobChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdJobChanged()
    End Sub
    Partial Private Sub OnSalaryChanging(value As Decimal)
    End Sub
    Partial Private Sub OnSalaryChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._HeaderDeposits = New EntitySet(Of HeaderDeposit)(AddressOf Me.attach_HeaderDeposits, AddressOf Me.detach_HeaderDeposits)
		Me._Job = CType(Nothing, EntityRef(Of Job))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Email", DbType:="VarChar(50)")>  _
	Public Property Email() As String
		Get
			Return Me._Email
		End Get
		Set
			If (String.Equals(Me._Email, value) = false) Then
				Me.OnEmailChanging(value)
				Me.SendPropertyChanging
				Me._Email = value
				Me.SendPropertyChanged("Email")
				Me.OnEmailChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Address", DbType:="VarChar(200) NOT NULL", CanBeNull:=false)>  _
	Public Property Address() As String
		Get
			Return Me._Address
		End Get
		Set
			If (String.Equals(Me._Address, value) = false) Then
				Me.OnAddressChanging(value)
				Me.SendPropertyChanging
				Me._Address = value
				Me.SendPropertyChanged("Address")
				Me.OnAddressChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PhoneNumber", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property PhoneNumber() As String
		Get
			Return Me._PhoneNumber
		End Get
		Set
			If (String.Equals(Me._PhoneNumber, value) = false) Then
				Me.OnPhoneNumberChanging(value)
				Me.SendPropertyChanging
				Me._PhoneNumber = value
				Me.SendPropertyChanged("PhoneNumber")
				Me.OnPhoneNumberChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DateofBirth", DbType:="DateTime NOT NULL")>  _
	Public Property DateofBirth() As Date
		Get
			Return Me._DateofBirth
		End Get
		Set
			If ((Me._DateofBirth = value)  _
						= false) Then
				Me.OnDateofBirthChanging(value)
				Me.SendPropertyChanging
				Me._DateofBirth = value
				Me.SendPropertyChanged("DateofBirth")
				Me.OnDateofBirthChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdJob", DbType:="Int NOT NULL")>  _
	Public Property IdJob() As Integer
		Get
			Return Me._IdJob
		End Get
		Set
			If ((Me._IdJob = value)  _
						= false) Then
				If Me._Job.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdJobChanging(value)
				Me.SendPropertyChanging
				Me._IdJob = value
				Me.SendPropertyChanged("IdJob")
				Me.OnIdJobChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Salary", DbType:="Money NOT NULL")>  _
	Public Property Salary() As Decimal
		Get
			Return Me._Salary
		End Get
		Set
			If ((Me._Salary = value)  _
						= false) Then
				Me.OnSalaryChanging(value)
				Me.SendPropertyChanging
				Me._Salary = value
				Me.SendPropertyChanged("Salary")
				Me.OnSalaryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_HeaderDeposit", Storage:="_HeaderDeposits", ThisKey:="Id", OtherKey:="IdEmployee")>  _
	Public Property HeaderDeposits() As EntitySet(Of HeaderDeposit)
		Get
			Return Me._HeaderDeposits
		End Get
		Set
			Me._HeaderDeposits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Job_Employee", Storage:="_Job", ThisKey:="IdJob", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Job() As Job
		Get
			Return Me._Job.Entity
		End Get
		Set
			Dim previousValue As Job = Me._Job.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Job.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Job.Entity = Nothing
					previousValue.Employees.Remove(Me)
				End If
				Me._Job.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Employees.Add(Me)
					Me._IdJob = value.Id
				Else
					Me._IdJob = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Job")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_HeaderDeposits(ByVal entity As HeaderDeposit)
		Me.SendPropertyChanging
		entity.Employee = Me
	End Sub
	
	Private Sub detach_HeaderDeposits(ByVal entity As HeaderDeposit)
		Me.SendPropertyChanging
		entity.Employee = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.HeaderDeposit")>  _
Partial Public Class HeaderDeposit
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdCustomer As Integer
	
	Private _IdEmployee As Integer
	
	Private _TransactionDatetime As Date
	
	Private _CompleteEstimationDatetime As System.Nullable(Of Date)
	
	Private _DetailDeposits As EntitySet(Of DetailDeposit)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Employee As EntityRef(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdCustomerChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCustomerChanged()
    End Sub
    Partial Private Sub OnIdEmployeeChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdEmployeeChanged()
    End Sub
    Partial Private Sub OnTransactionDatetimeChanging(value As Date)
    End Sub
    Partial Private Sub OnTransactionDatetimeChanged()
    End Sub
    Partial Private Sub OnCompleteEstimationDatetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompleteEstimationDatetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetailDeposits = New EntitySet(Of DetailDeposit)(AddressOf Me.attach_DetailDeposits, AddressOf Me.detach_DetailDeposits)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Employee = CType(Nothing, EntityRef(Of Employee))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCustomer", DbType:="Int NOT NULL")>  _
	Public Property IdCustomer() As Integer
		Get
			Return Me._IdCustomer
		End Get
		Set
			If ((Me._IdCustomer = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCustomerChanging(value)
				Me.SendPropertyChanging
				Me._IdCustomer = value
				Me.SendPropertyChanged("IdCustomer")
				Me.OnIdCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdEmployee", DbType:="Int NOT NULL")>  _
	Public Property IdEmployee() As Integer
		Get
			Return Me._IdEmployee
		End Get
		Set
			If ((Me._IdEmployee = value)  _
						= false) Then
				If Me._Employee.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdEmployeeChanging(value)
				Me.SendPropertyChanging
				Me._IdEmployee = value
				Me.SendPropertyChanged("IdEmployee")
				Me.OnIdEmployeeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TransactionDatetime", DbType:="DateTime NOT NULL")>  _
	Public Property TransactionDatetime() As Date
		Get
			Return Me._TransactionDatetime
		End Get
		Set
			If ((Me._TransactionDatetime = value)  _
						= false) Then
				Me.OnTransactionDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._TransactionDatetime = value
				Me.SendPropertyChanged("TransactionDatetime")
				Me.OnTransactionDatetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompleteEstimationDatetime", DbType:="DateTime")>  _
	Public Property CompleteEstimationDatetime() As System.Nullable(Of Date)
		Get
			Return Me._CompleteEstimationDatetime
		End Get
		Set
			If (Me._CompleteEstimationDatetime.Equals(value) = false) Then
				Me.OnCompleteEstimationDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._CompleteEstimationDatetime = value
				Me.SendPropertyChanged("CompleteEstimationDatetime")
				Me.OnCompleteEstimationDatetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="HeaderDeposit_DetailDeposit", Storage:="_DetailDeposits", ThisKey:="Id", OtherKey:="IdDeposit")>  _
	Public Property DetailDeposits() As EntitySet(Of DetailDeposit)
		Get
			Return Me._DetailDeposits
		End Get
		Set
			Me._DetailDeposits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_HeaderDeposit", Storage:="_Customer", ThisKey:="IdCustomer", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.HeaderDeposits.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HeaderDeposits.Add(Me)
					Me._IdCustomer = value.Id
				Else
					Me._IdCustomer = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Employee_HeaderDeposit", Storage:="_Employee", ThisKey:="IdEmployee", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Employee() As Employee
		Get
			Return Me._Employee.Entity
		End Get
		Set
			Dim previousValue As Employee = Me._Employee.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Employee.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Employee.Entity = Nothing
					previousValue.HeaderDeposits.Remove(Me)
				End If
				Me._Employee.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.HeaderDeposits.Add(Me)
					Me._IdEmployee = value.Id
				Else
					Me._IdEmployee = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Employee")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.HeaderDeposit = Me
	End Sub
	
	Private Sub detach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.HeaderDeposit = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Job")>  _
Partial Public Class Job
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _Employees As EntitySet(Of Employee)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Employees = New EntitySet(Of Employee)(AddressOf Me.attach_Employees, AddressOf Me.detach_Employees)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Job_Employee", Storage:="_Employees", ThisKey:="Id", OtherKey:="IdJob")>  _
	Public Property Employees() As EntitySet(Of Employee)
		Get
			Return Me._Employees
		End Get
		Set
			Me._Employees.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Job = Me
	End Sub
	
	Private Sub detach_Employees(ByVal entity As Employee)
		Me.SendPropertyChanging
		entity.Job = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Package")>  _
Partial Public Class Package
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdService As Integer
	
	Private _TotalUnit As Integer
	
	Private _Price As Integer
	
	Private _PrepaidPackages As EntitySet(Of PrepaidPackage)
	
	Private _Service As EntityRef(Of Service)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdServiceChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdServiceChanged()
    End Sub
    Partial Private Sub OnTotalUnitChanging(value As Integer)
    End Sub
    Partial Private Sub OnTotalUnitChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PrepaidPackages = New EntitySet(Of PrepaidPackage)(AddressOf Me.attach_PrepaidPackages, AddressOf Me.detach_PrepaidPackages)
		Me._Service = CType(Nothing, EntityRef(Of Service))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdService", DbType:="Int NOT NULL")>  _
	Public Property IdService() As Integer
		Get
			Return Me._IdService
		End Get
		Set
			If ((Me._IdService = value)  _
						= false) Then
				If Me._Service.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdServiceChanging(value)
				Me.SendPropertyChanging
				Me._IdService = value
				Me.SendPropertyChanged("IdService")
				Me.OnIdServiceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TotalUnit", DbType:="Int NOT NULL")>  _
	Public Property TotalUnit() As Integer
		Get
			Return Me._TotalUnit
		End Get
		Set
			If ((Me._TotalUnit = value)  _
						= false) Then
				Me.OnTotalUnitChanging(value)
				Me.SendPropertyChanging
				Me._TotalUnit = value
				Me.SendPropertyChanged("TotalUnit")
				Me.OnTotalUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int NOT NULL")>  _
	Public Property Price() As Integer
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Package_PrepaidPackage", Storage:="_PrepaidPackages", ThisKey:="Id", OtherKey:="IdPackage")>  _
	Public Property PrepaidPackages() As EntitySet(Of PrepaidPackage)
		Get
			Return Me._PrepaidPackages
		End Get
		Set
			Me._PrepaidPackages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_Package", Storage:="_Service", ThisKey:="IdService", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Service() As Service
		Get
			Return Me._Service.Entity
		End Get
		Set
			Dim previousValue As Service = Me._Service.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Service.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Service.Entity = Nothing
					previousValue.Packages.Remove(Me)
				End If
				Me._Service.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Packages.Add(Me)
					Me._IdService = value.Id
				Else
					Me._IdService = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Service")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PrepaidPackages(ByVal entity As PrepaidPackage)
		Me.SendPropertyChanging
		entity.Package = Me
	End Sub
	
	Private Sub detach_PrepaidPackages(ByVal entity As PrepaidPackage)
		Me.SendPropertyChanging
		entity.Package = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PrepaidPackage")>  _
Partial Public Class PrepaidPackage
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _IdCustomer As Integer
	
	Private _IdPackage As Integer
	
	Private _Price As Integer
	
	Private _StartDatetime As Date
	
	Private _CompletedDatetime As System.Nullable(Of Date)
	
	Private _DetailDeposits As EntitySet(Of DetailDeposit)
	
	Private _Customer As EntityRef(Of Customer)
	
	Private _Package As EntityRef(Of Package)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnIdCustomerChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCustomerChanged()
    End Sub
    Partial Private Sub OnIdPackageChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdPackageChanged()
    End Sub
    Partial Private Sub OnPriceChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceChanged()
    End Sub
    Partial Private Sub OnStartDatetimeChanging(value As Date)
    End Sub
    Partial Private Sub OnStartDatetimeChanged()
    End Sub
    Partial Private Sub OnCompletedDatetimeChanging(value As System.Nullable(Of Date))
    End Sub
    Partial Private Sub OnCompletedDatetimeChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetailDeposits = New EntitySet(Of DetailDeposit)(AddressOf Me.attach_DetailDeposits, AddressOf Me.detach_DetailDeposits)
		Me._Customer = CType(Nothing, EntityRef(Of Customer))
		Me._Package = CType(Nothing, EntityRef(Of Package))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCustomer", DbType:="Int NOT NULL")>  _
	Public Property IdCustomer() As Integer
		Get
			Return Me._IdCustomer
		End Get
		Set
			If ((Me._IdCustomer = value)  _
						= false) Then
				If Me._Customer.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCustomerChanging(value)
				Me.SendPropertyChanging
				Me._IdCustomer = value
				Me.SendPropertyChanged("IdCustomer")
				Me.OnIdCustomerChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdPackage", DbType:="Int NOT NULL")>  _
	Public Property IdPackage() As Integer
		Get
			Return Me._IdPackage
		End Get
		Set
			If ((Me._IdPackage = value)  _
						= false) Then
				If Me._Package.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdPackageChanging(value)
				Me.SendPropertyChanging
				Me._IdPackage = value
				Me.SendPropertyChanged("IdPackage")
				Me.OnIdPackageChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Price", DbType:="Int NOT NULL")>  _
	Public Property Price() As Integer
		Get
			Return Me._Price
		End Get
		Set
			If ((Me._Price = value)  _
						= false) Then
				Me.OnPriceChanging(value)
				Me.SendPropertyChanging
				Me._Price = value
				Me.SendPropertyChanged("Price")
				Me.OnPriceChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_StartDatetime", DbType:="DateTime NOT NULL")>  _
	Public Property StartDatetime() As Date
		Get
			Return Me._StartDatetime
		End Get
		Set
			If ((Me._StartDatetime = value)  _
						= false) Then
				Me.OnStartDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._StartDatetime = value
				Me.SendPropertyChanged("StartDatetime")
				Me.OnStartDatetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_CompletedDatetime", DbType:="DateTime")>  _
	Public Property CompletedDatetime() As System.Nullable(Of Date)
		Get
			Return Me._CompletedDatetime
		End Get
		Set
			If (Me._CompletedDatetime.Equals(value) = false) Then
				Me.OnCompletedDatetimeChanging(value)
				Me.SendPropertyChanging
				Me._CompletedDatetime = value
				Me.SendPropertyChanged("CompletedDatetime")
				Me.OnCompletedDatetimeChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PrepaidPackage_DetailDeposit", Storage:="_DetailDeposits", ThisKey:="Id", OtherKey:="IdPrepaidPackage")>  _
	Public Property DetailDeposits() As EntitySet(Of DetailDeposit)
		Get
			Return Me._DetailDeposits
		End Get
		Set
			Me._DetailDeposits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Customer_PrepaidPackage", Storage:="_Customer", ThisKey:="IdCustomer", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Customer() As Customer
		Get
			Return Me._Customer.Entity
		End Get
		Set
			Dim previousValue As Customer = Me._Customer.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Customer.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Customer.Entity = Nothing
					previousValue.PrepaidPackages.Remove(Me)
				End If
				Me._Customer.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PrepaidPackages.Add(Me)
					Me._IdCustomer = value.Id
				Else
					Me._IdCustomer = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Customer")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Package_PrepaidPackage", Storage:="_Package", ThisKey:="IdPackage", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Package() As Package
		Get
			Return Me._Package.Entity
		End Get
		Set
			Dim previousValue As Package = Me._Package.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Package.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Package.Entity = Nothing
					previousValue.PrepaidPackages.Remove(Me)
				End If
				Me._Package.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PrepaidPackages.Add(Me)
					Me._IdPackage = value.Id
				Else
					Me._IdPackage = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Package")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.PrepaidPackage = Me
	End Sub
	
	Private Sub detach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.PrepaidPackage = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Service")>  _
Partial Public Class Service
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _Id As Integer
	
	Private _Name As String
	
	Private _IdCategory As Integer
	
	Private _IdUnit As Integer
	
	Private _PriceUnit As Integer
	
	Private _EstimationDuration As Integer
	
	Private _DetailDeposits As EntitySet(Of DetailDeposit)
	
	Private _Packages As EntitySet(Of Package)
	
	Private _Category As EntityRef(Of Category)
	
	Private _Unit As EntityRef(Of Unit)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdChanged()
    End Sub
    Partial Private Sub OnNameChanging(value As String)
    End Sub
    Partial Private Sub OnNameChanged()
    End Sub
    Partial Private Sub OnIdCategoryChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdCategoryChanged()
    End Sub
    Partial Private Sub OnIdUnitChanging(value As Integer)
    End Sub
    Partial Private Sub OnIdUnitChanged()
    End Sub
    Partial Private Sub OnPriceUnitChanging(value As Integer)
    End Sub
    Partial Private Sub OnPriceUnitChanged()
    End Sub
    Partial Private Sub OnEstimationDurationChanging(value As Integer)
    End Sub
    Partial Private Sub OnEstimationDurationChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._DetailDeposits = New EntitySet(Of DetailDeposit)(AddressOf Me.attach_DetailDeposits, AddressOf Me.detach_DetailDeposits)
		Me._Packages = New EntitySet(Of Package)(AddressOf Me.attach_Packages, AddressOf Me.detach_Packages)
		Me._Category = CType(Nothing, EntityRef(Of Category))
		Me._Unit = CType(Nothing, EntityRef(Of Unit))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Id", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property Id() As Integer
		Get
			Return Me._Id
		End Get
		Set
			If ((Me._Id = value)  _
						= false) Then
				Me.OnIdChanging(value)
				Me.SendPropertyChanging
				Me._Id = value
				Me.SendPropertyChanged("Id")
				Me.OnIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Name", DbType:="VarChar(50) NOT NULL", CanBeNull:=false)>  _
	Public Property Name() As String
		Get
			Return Me._Name
		End Get
		Set
			If (String.Equals(Me._Name, value) = false) Then
				Me.OnNameChanging(value)
				Me.SendPropertyChanging
				Me._Name = value
				Me.SendPropertyChanged("Name")
				Me.OnNameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdCategory", DbType:="Int NOT NULL")>  _
	Public Property IdCategory() As Integer
		Get
			Return Me._IdCategory
		End Get
		Set
			If ((Me._IdCategory = value)  _
						= false) Then
				If Me._Category.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdCategoryChanging(value)
				Me.SendPropertyChanging
				Me._IdCategory = value
				Me.SendPropertyChanged("IdCategory")
				Me.OnIdCategoryChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_IdUnit", DbType:="Int NOT NULL")>  _
	Public Property IdUnit() As Integer
		Get
			Return Me._IdUnit
		End Get
		Set
			If ((Me._IdUnit = value)  _
						= false) Then
				If Me._Unit.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnIdUnitChanging(value)
				Me.SendPropertyChanging
				Me._IdUnit = value
				Me.SendPropertyChanged("IdUnit")
				Me.OnIdUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PriceUnit", DbType:="Int NOT NULL")>  _
	Public Property PriceUnit() As Integer
		Get
			Return Me._PriceUnit
		End Get
		Set
			If ((Me._PriceUnit = value)  _
						= false) Then
				Me.OnPriceUnitChanging(value)
				Me.SendPropertyChanging
				Me._PriceUnit = value
				Me.SendPropertyChanged("PriceUnit")
				Me.OnPriceUnitChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_EstimationDuration", DbType:="Int NOT NULL")>  _
	Public Property EstimationDuration() As Integer
		Get
			Return Me._EstimationDuration
		End Get
		Set
			If ((Me._EstimationDuration = value)  _
						= false) Then
				Me.OnEstimationDurationChanging(value)
				Me.SendPropertyChanging
				Me._EstimationDuration = value
				Me.SendPropertyChanged("EstimationDuration")
				Me.OnEstimationDurationChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_DetailDeposit", Storage:="_DetailDeposits", ThisKey:="Id", OtherKey:="IdService")>  _
	Public Property DetailDeposits() As EntitySet(Of DetailDeposit)
		Get
			Return Me._DetailDeposits
		End Get
		Set
			Me._DetailDeposits.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Service_Package", Storage:="_Packages", ThisKey:="Id", OtherKey:="IdService")>  _
	Public Property Packages() As EntitySet(Of Package)
		Get
			Return Me._Packages
		End Get
		Set
			Me._Packages.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Category_Service", Storage:="_Category", ThisKey:="IdCategory", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Category() As Category
		Get
			Return Me._Category.Entity
		End Get
		Set
			Dim previousValue As Category = Me._Category.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Category.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Category.Entity = Nothing
					previousValue.Services.Remove(Me)
				End If
				Me._Category.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Services.Add(Me)
					Me._IdCategory = value.Id
				Else
					Me._IdCategory = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Category")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Unit_Service", Storage:="_Unit", ThisKey:="IdUnit", OtherKey:="Id", IsForeignKey:=true)>  _
	Public Property Unit() As Unit
		Get
			Return Me._Unit.Entity
		End Get
		Set
			Dim previousValue As Unit = Me._Unit.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Unit.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Unit.Entity = Nothing
					previousValue.Services.Remove(Me)
				End If
				Me._Unit.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Services.Add(Me)
					Me._IdUnit = value.Id
				Else
					Me._IdUnit = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Unit")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.Service = Me
	End Sub
	
	Private Sub detach_DetailDeposits(ByVal entity As DetailDeposit)
		Me.SendPropertyChanging
		entity.Service = Nothing
	End Sub
	
	Private Sub attach_Packages(ByVal entity As Package)
		Me.SendPropertyChanging
		entity.Service = Me
	End Sub
	
	Private Sub detach_Packages(ByVal entity As Package)
		Me.SendPropertyChanging
		entity.Service = Nothing
	End Sub
End Class
