'------------------------------------------------------------------------------
' <auto-generated>
'     This code was generated by a tool.
'     Runtime Version:4.0.30319.42000
'
'     Changes to this file may cause incorrect behavior and will be lost if
'     the code is regenerated.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict On
Option Explicit On

Imports System
Imports System.Collections.Generic
Imports System.ComponentModel
Imports System.Data
Imports System.Data.Linq
Imports System.Data.Linq.Mapping
Imports System.Linq
Imports System.Linq.Expressions
Imports System.Reflection


<Global.System.Data.Linq.Mapping.DatabaseAttribute(Name:="NewRental")>  _
Partial Public Class SquekDataContext
	Inherits System.Data.Linq.DataContext
	
	Private Shared mappingSource As System.Data.Linq.Mapping.MappingSource = New AttributeMappingSource()
	
  #Region "Extensibility Method Definitions"
  Partial Private Sub OnCreated()
  End Sub
  Partial Private Sub InsertDenda(instance As Denda)
    End Sub
  Partial Private Sub UpdateDenda(instance As Denda)
    End Sub
  Partial Private Sub DeleteDenda(instance As Denda)
    End Sub
  Partial Private Sub InsertPinjamHeader(instance As PinjamHeader)
    End Sub
  Partial Private Sub UpdatePinjamHeader(instance As PinjamHeader)
    End Sub
  Partial Private Sub DeletePinjamHeader(instance As PinjamHeader)
    End Sub
  Partial Private Sub InsertKaryawan(instance As Karyawan)
    End Sub
  Partial Private Sub UpdateKaryawan(instance As Karyawan)
    End Sub
  Partial Private Sub DeleteKaryawan(instance As Karyawan)
    End Sub
  Partial Private Sub InsertKaset(instance As Kaset)
    End Sub
  Partial Private Sub UpdateKaset(instance As Kaset)
    End Sub
  Partial Private Sub DeleteKaset(instance As Kaset)
    End Sub
  Partial Private Sub InsertKembali(instance As Kembali)
    End Sub
  Partial Private Sub UpdateKembali(instance As Kembali)
    End Sub
  Partial Private Sub DeleteKembali(instance As Kembali)
    End Sub
  Partial Private Sub InsertPelanggan(instance As Pelanggan)
    End Sub
  Partial Private Sub UpdatePelanggan(instance As Pelanggan)
    End Sub
  Partial Private Sub DeletePelanggan(instance As Pelanggan)
    End Sub
  Partial Private Sub InsertPinjamDetail(instance As PinjamDetail)
    End Sub
  Partial Private Sub UpdatePinjamDetail(instance As PinjamDetail)
    End Sub
  Partial Private Sub DeletePinjamDetail(instance As PinjamDetail)
    End Sub
  #End Region
	
	Public Sub New()
		MyBase.New(Global.Rental.My.MySettings.Default.NewRentalConnectionString, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As String, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public Sub New(ByVal connection As System.Data.IDbConnection, ByVal mappingSource As System.Data.Linq.Mapping.MappingSource)
		MyBase.New(connection, mappingSource)
		OnCreated
	End Sub
	
	Public ReadOnly Property Dendas() As System.Data.Linq.Table(Of Denda)
		Get
			Return Me.GetTable(Of Denda)
		End Get
	End Property
	
	Public ReadOnly Property PinjamHeaders() As System.Data.Linq.Table(Of PinjamHeader)
		Get
			Return Me.GetTable(Of PinjamHeader)
		End Get
	End Property
	
	Public ReadOnly Property Karyawans() As System.Data.Linq.Table(Of Karyawan)
		Get
			Return Me.GetTable(Of Karyawan)
		End Get
	End Property
	
	Public ReadOnly Property Kasets() As System.Data.Linq.Table(Of Kaset)
		Get
			Return Me.GetTable(Of Kaset)
		End Get
	End Property
	
	Public ReadOnly Property Kembalis() As System.Data.Linq.Table(Of Kembali)
		Get
			Return Me.GetTable(Of Kembali)
		End Get
	End Property
	
	Public ReadOnly Property Pelanggans() As System.Data.Linq.Table(Of Pelanggan)
		Get
			Return Me.GetTable(Of Pelanggan)
		End Get
	End Property
	
	Public ReadOnly Property PinjamDetails() As System.Data.Linq.Table(Of PinjamDetail)
		Get
			Return Me.GetTable(Of PinjamDetail)
		End Get
	End Property
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Denda")>  _
Partial Public Class Denda
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _DendaId As Integer
	
	Private _Denda As Integer
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnDendaIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnDendaIdChanged()
    End Sub
    Partial Private Sub OnDendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnDendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_DendaId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property DendaId() As Integer
		Get
			Return Me._DendaId
		End Get
		Set
			If ((Me._DendaId = value)  _
						= false) Then
				Me.OnDendaIdChanging(value)
				Me.SendPropertyChanging
				Me._DendaId = value
				Me.SendPropertyChanged("DendaId")
				Me.OnDendaIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Denda", DbType:="Int NOT NULL")>  _
	Public Property Denda() As Integer
		Get
			Return Me._Denda
		End Get
		Set
			If ((Me._Denda = value)  _
						= false) Then
				Me.OnDendaChanging(value)
				Me.SendPropertyChanging
				Me._Denda = value
				Me.SendPropertyChanged("Denda")
				Me.OnDendaChanged
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PinjamHeader")>  _
Partial Public Class PinjamHeader
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PinjamHeaderId As Integer
	
	Private _KaryawanId As Integer
	
	Private _PelangganId As Integer
	
	Private _TglPinjam As Date
	
	Private _TglKembali As Date
	
	Private _HargaTotal As Integer
	
	Private _Status As String
	
	Private _Kembalis As EntitySet(Of Kembali)
	
	Private _PinjamDetails As EntitySet(Of PinjamDetail)
	
	Private _Karyawan As EntityRef(Of Karyawan)
	
	Private _Pelanggan As EntityRef(Of Pelanggan)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanged()
    End Sub
    Partial Private Sub OnKaryawanIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKaryawanIdChanged()
    End Sub
    Partial Private Sub OnPelangganIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPelangganIdChanged()
    End Sub
    Partial Private Sub OnTglPinjamChanging(value As Date)
    End Sub
    Partial Private Sub OnTglPinjamChanged()
    End Sub
    Partial Private Sub OnTglKembaliChanging(value As Date)
    End Sub
    Partial Private Sub OnTglKembaliChanged()
    End Sub
    Partial Private Sub OnHargaTotalChanging(value As Integer)
    End Sub
    Partial Private Sub OnHargaTotalChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Kembalis = New EntitySet(Of Kembali)(AddressOf Me.attach_Kembalis, AddressOf Me.detach_Kembalis)
		Me._PinjamDetails = New EntitySet(Of PinjamDetail)(AddressOf Me.attach_PinjamDetails, AddressOf Me.detach_PinjamDetails)
		Me._Karyawan = CType(Nothing, EntityRef(Of Karyawan))
		Me._Pelanggan = CType(Nothing, EntityRef(Of Pelanggan))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PinjamHeaderId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PinjamHeaderId() As Integer
		Get
			Return Me._PinjamHeaderId
		End Get
		Set
			If ((Me._PinjamHeaderId = value)  _
						= false) Then
				Me.OnPinjamHeaderIdChanging(value)
				Me.SendPropertyChanging
				Me._PinjamHeaderId = value
				Me.SendPropertyChanged("PinjamHeaderId")
				Me.OnPinjamHeaderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KaryawanId", DbType:="Int NOT NULL")>  _
	Public Property KaryawanId() As Integer
		Get
			Return Me._KaryawanId
		End Get
		Set
			If ((Me._KaryawanId = value)  _
						= false) Then
				If Me._Karyawan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnKaryawanIdChanging(value)
				Me.SendPropertyChanging
				Me._KaryawanId = value
				Me.SendPropertyChanged("KaryawanId")
				Me.OnKaryawanIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PelangganId", DbType:="Int NOT NULL")>  _
	Public Property PelangganId() As Integer
		Get
			Return Me._PelangganId
		End Get
		Set
			If ((Me._PelangganId = value)  _
						= false) Then
				If Me._Pelanggan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPelangganIdChanging(value)
				Me.SendPropertyChanging
				Me._PelangganId = value
				Me.SendPropertyChanged("PelangganId")
				Me.OnPelangganIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TglPinjam", DbType:="DateTime NOT NULL")>  _
	Public Property TglPinjam() As Date
		Get
			Return Me._TglPinjam
		End Get
		Set
			If ((Me._TglPinjam = value)  _
						= false) Then
				Me.OnTglPinjamChanging(value)
				Me.SendPropertyChanging
				Me._TglPinjam = value
				Me.SendPropertyChanged("TglPinjam")
				Me.OnTglPinjamChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TglKembali", DbType:="DateTime NOT NULL")>  _
	Public Property TglKembali() As Date
		Get
			Return Me._TglKembali
		End Get
		Set
			If ((Me._TglKembali = value)  _
						= false) Then
				Me.OnTglKembaliChanging(value)
				Me.SendPropertyChanging
				Me._TglKembali = value
				Me.SendPropertyChanged("TglKembali")
				Me.OnTglKembaliChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_HargaTotal", DbType:="Int NOT NULL")>  _
	Public Property HargaTotal() As Integer
		Get
			Return Me._HargaTotal
		End Get
		Set
			If ((Me._HargaTotal = value)  _
						= false) Then
				Me.OnHargaTotalChanging(value)
				Me.SendPropertyChanging
				Me._HargaTotal = value
				Me.SendPropertyChanged("HargaTotal")
				Me.OnHargaTotalChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PinjamHeader_Kembali", Storage:="_Kembalis", ThisKey:="PinjamHeaderId", OtherKey:="PinjamHeaderId")>  _
	Public Property Kembalis() As EntitySet(Of Kembali)
		Get
			Return Me._Kembalis
		End Get
		Set
			Me._Kembalis.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PinjamHeader_PinjamDetail", Storage:="_PinjamDetails", ThisKey:="PinjamHeaderId", OtherKey:="PinjamHeaderId")>  _
	Public Property PinjamDetails() As EntitySet(Of PinjamDetail)
		Get
			Return Me._PinjamDetails
		End Get
		Set
			Me._PinjamDetails.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Karyawan_PinjamHeader", Storage:="_Karyawan", ThisKey:="KaryawanId", OtherKey:="KaryawanId", IsForeignKey:=true)>  _
	Public Property Karyawan() As Karyawan
		Get
			Return Me._Karyawan.Entity
		End Get
		Set
			Dim previousValue As Karyawan = Me._Karyawan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Karyawan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Karyawan.Entity = Nothing
					previousValue.PinjamHeaders.Remove(Me)
				End If
				Me._Karyawan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PinjamHeaders.Add(Me)
					Me._KaryawanId = value.KaryawanId
				Else
					Me._KaryawanId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Karyawan")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pelanggan_PinjamHeader", Storage:="_Pelanggan", ThisKey:="PelangganId", OtherKey:="PelangganId", IsForeignKey:=true)>  _
	Public Property Pelanggan() As Pelanggan
		Get
			Return Me._Pelanggan.Entity
		End Get
		Set
			Dim previousValue As Pelanggan = Me._Pelanggan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Pelanggan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Pelanggan.Entity = Nothing
					previousValue.PinjamHeaders.Remove(Me)
				End If
				Me._Pelanggan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PinjamHeaders.Add(Me)
					Me._PelangganId = value.PelangganId
				Else
					Me._PelangganId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Pelanggan")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_Kembalis(ByVal entity As Kembali)
		Me.SendPropertyChanging
		entity.PinjamHeader = Me
	End Sub
	
	Private Sub detach_Kembalis(ByVal entity As Kembali)
		Me.SendPropertyChanging
		entity.PinjamHeader = Nothing
	End Sub
	
	Private Sub attach_PinjamDetails(ByVal entity As PinjamDetail)
		Me.SendPropertyChanging
		entity.PinjamHeader = Me
	End Sub
	
	Private Sub detach_PinjamDetails(ByVal entity As PinjamDetail)
		Me.SendPropertyChanging
		entity.PinjamHeader = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Karyawan")>  _
Partial Public Class Karyawan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _KaryawanId As Integer
	
	Private _KaryawanNama As String
	
	Private _Alamat As String
	
	Private _NoHP As String
	
	Private _Username As String
	
	Private _Password As String
	
	Private _Status As String
	
	Private _PinjamHeaders As EntitySet(Of PinjamHeader)
	
	Private _Kembalis As EntitySet(Of Kembali)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnKaryawanIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKaryawanIdChanged()
    End Sub
    Partial Private Sub OnKaryawanNamaChanging(value As String)
    End Sub
    Partial Private Sub OnKaryawanNamaChanged()
    End Sub
    Partial Private Sub OnAlamatChanging(value As String)
    End Sub
    Partial Private Sub OnAlamatChanged()
    End Sub
    Partial Private Sub OnNoHPChanging(value As String)
    End Sub
    Partial Private Sub OnNoHPChanged()
    End Sub
    Partial Private Sub OnUsernameChanging(value As String)
    End Sub
    Partial Private Sub OnUsernameChanged()
    End Sub
    Partial Private Sub OnPasswordChanging(value As String)
    End Sub
    Partial Private Sub OnPasswordChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PinjamHeaders = New EntitySet(Of PinjamHeader)(AddressOf Me.attach_PinjamHeaders, AddressOf Me.detach_PinjamHeaders)
		Me._Kembalis = New EntitySet(Of Kembali)(AddressOf Me.attach_Kembalis, AddressOf Me.detach_Kembalis)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KaryawanId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property KaryawanId() As Integer
		Get
			Return Me._KaryawanId
		End Get
		Set
			If ((Me._KaryawanId = value)  _
						= false) Then
				Me.OnKaryawanIdChanging(value)
				Me.SendPropertyChanging
				Me._KaryawanId = value
				Me.SendPropertyChanged("KaryawanId")
				Me.OnKaryawanIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KaryawanNama", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property KaryawanNama() As String
		Get
			Return Me._KaryawanNama
		End Get
		Set
			If (String.Equals(Me._KaryawanNama, value) = false) Then
				Me.OnKaryawanNamaChanging(value)
				Me.SendPropertyChanging
				Me._KaryawanNama = value
				Me.SendPropertyChanged("KaryawanNama")
				Me.OnKaryawanNamaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alamat", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Alamat() As String
		Get
			Return Me._Alamat
		End Get
		Set
			If (String.Equals(Me._Alamat, value) = false) Then
				Me.OnAlamatChanging(value)
				Me.SendPropertyChanging
				Me._Alamat = value
				Me.SendPropertyChanged("Alamat")
				Me.OnAlamatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoHP", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property NoHP() As String
		Get
			Return Me._NoHP
		End Get
		Set
			If (String.Equals(Me._NoHP, value) = false) Then
				Me.OnNoHPChanging(value)
				Me.SendPropertyChanging
				Me._NoHP = value
				Me.SendPropertyChanged("NoHP")
				Me.OnNoHPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Username", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Username() As String
		Get
			Return Me._Username
		End Get
		Set
			If (String.Equals(Me._Username, value) = false) Then
				Me.OnUsernameChanging(value)
				Me.SendPropertyChanging
				Me._Username = value
				Me.SendPropertyChanged("Username")
				Me.OnUsernameChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Password", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Password() As String
		Get
			Return Me._Password
		End Get
		Set
			If (String.Equals(Me._Password, value) = false) Then
				Me.OnPasswordChanging(value)
				Me.SendPropertyChanging
				Me._Password = value
				Me.SendPropertyChanged("Password")
				Me.OnPasswordChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Karyawan_PinjamHeader", Storage:="_PinjamHeaders", ThisKey:="KaryawanId", OtherKey:="KaryawanId")>  _
	Public Property PinjamHeaders() As EntitySet(Of PinjamHeader)
		Get
			Return Me._PinjamHeaders
		End Get
		Set
			Me._PinjamHeaders.Assign(value)
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Karyawan_Kembali", Storage:="_Kembalis", ThisKey:="KaryawanId", OtherKey:="KaryawanId")>  _
	Public Property Kembalis() As EntitySet(Of Kembali)
		Get
			Return Me._Kembalis
		End Get
		Set
			Me._Kembalis.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PinjamHeaders(ByVal entity As PinjamHeader)
		Me.SendPropertyChanging
		entity.Karyawan = Me
	End Sub
	
	Private Sub detach_PinjamHeaders(ByVal entity As PinjamHeader)
		Me.SendPropertyChanging
		entity.Karyawan = Nothing
	End Sub
	
	Private Sub attach_Kembalis(ByVal entity As Kembali)
		Me.SendPropertyChanging
		entity.Karyawan = Me
	End Sub
	
	Private Sub detach_Kembalis(ByVal entity As Kembali)
		Me.SendPropertyChanging
		entity.Karyawan = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Kaset")>  _
Partial Public Class Kaset
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _KasetId As Integer
	
	Private _KasetNama As String
	
	Private _Jenis As String
	
	Private _Harga As Integer
	
	Private _Stok As Integer
	
	Private _PinjamDetails As EntitySet(Of PinjamDetail)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnKasetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKasetIdChanged()
    End Sub
    Partial Private Sub OnKasetNamaChanging(value As String)
    End Sub
    Partial Private Sub OnKasetNamaChanged()
    End Sub
    Partial Private Sub OnJenisChanging(value As String)
    End Sub
    Partial Private Sub OnJenisChanged()
    End Sub
    Partial Private Sub OnHargaChanging(value As Integer)
    End Sub
    Partial Private Sub OnHargaChanged()
    End Sub
    Partial Private Sub OnStokChanging(value As Integer)
    End Sub
    Partial Private Sub OnStokChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PinjamDetails = New EntitySet(Of PinjamDetail)(AddressOf Me.attach_PinjamDetails, AddressOf Me.detach_PinjamDetails)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KasetId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property KasetId() As Integer
		Get
			Return Me._KasetId
		End Get
		Set
			If ((Me._KasetId = value)  _
						= false) Then
				Me.OnKasetIdChanging(value)
				Me.SendPropertyChanging
				Me._KasetId = value
				Me.SendPropertyChanged("KasetId")
				Me.OnKasetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KasetNama", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property KasetNama() As String
		Get
			Return Me._KasetNama
		End Get
		Set
			If (String.Equals(Me._KasetNama, value) = false) Then
				Me.OnKasetNamaChanging(value)
				Me.SendPropertyChanging
				Me._KasetNama = value
				Me.SendPropertyChanged("KasetNama")
				Me.OnKasetNamaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Jenis", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property Jenis() As String
		Get
			Return Me._Jenis
		End Get
		Set
			If (String.Equals(Me._Jenis, value) = false) Then
				Me.OnJenisChanging(value)
				Me.SendPropertyChanging
				Me._Jenis = value
				Me.SendPropertyChanged("Jenis")
				Me.OnJenisChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Harga", DbType:="Int NOT NULL")>  _
	Public Property Harga() As Integer
		Get
			Return Me._Harga
		End Get
		Set
			If ((Me._Harga = value)  _
						= false) Then
				Me.OnHargaChanging(value)
				Me.SendPropertyChanging
				Me._Harga = value
				Me.SendPropertyChanged("Harga")
				Me.OnHargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Stok", DbType:="Int NOT NULL")>  _
	Public Property Stok() As Integer
		Get
			Return Me._Stok
		End Get
		Set
			If ((Me._Stok = value)  _
						= false) Then
				Me.OnStokChanging(value)
				Me.SendPropertyChanging
				Me._Stok = value
				Me.SendPropertyChanged("Stok")
				Me.OnStokChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Kaset_PinjamDetail", Storage:="_PinjamDetails", ThisKey:="KasetId", OtherKey:="KasetId")>  _
	Public Property PinjamDetails() As EntitySet(Of PinjamDetail)
		Get
			Return Me._PinjamDetails
		End Get
		Set
			Me._PinjamDetails.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PinjamDetails(ByVal entity As PinjamDetail)
		Me.SendPropertyChanging
		entity.Kaset = Me
	End Sub
	
	Private Sub detach_PinjamDetails(ByVal entity As PinjamDetail)
		Me.SendPropertyChanging
		entity.Kaset = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Kembali")>  _
Partial Public Class Kembali
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _KembaliId As Integer
	
	Private _PinjamHeaderId As Integer
	
	Private _KaryawanId As Integer
	
	Private _TglKembali As Date
	
	Private _TglDikembali As Date
	
	Private _Denda As Integer
	
	Private _Karyawan As EntityRef(Of Karyawan)
	
	Private _PinjamHeader As EntityRef(Of PinjamHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnKembaliIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKembaliIdChanged()
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanged()
    End Sub
    Partial Private Sub OnKaryawanIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKaryawanIdChanged()
    End Sub
    Partial Private Sub OnTglKembaliChanging(value As Date)
    End Sub
    Partial Private Sub OnTglKembaliChanged()
    End Sub
    Partial Private Sub OnTglDikembaliChanging(value As Date)
    End Sub
    Partial Private Sub OnTglDikembaliChanged()
    End Sub
    Partial Private Sub OnDendaChanging(value As Integer)
    End Sub
    Partial Private Sub OnDendaChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Karyawan = CType(Nothing, EntityRef(Of Karyawan))
		Me._PinjamHeader = CType(Nothing, EntityRef(Of PinjamHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KembaliId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property KembaliId() As Integer
		Get
			Return Me._KembaliId
		End Get
		Set
			If ((Me._KembaliId = value)  _
						= false) Then
				Me.OnKembaliIdChanging(value)
				Me.SendPropertyChanging
				Me._KembaliId = value
				Me.SendPropertyChanged("KembaliId")
				Me.OnKembaliIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PinjamHeaderId", DbType:="Int NOT NULL")>  _
	Public Property PinjamHeaderId() As Integer
		Get
			Return Me._PinjamHeaderId
		End Get
		Set
			If ((Me._PinjamHeaderId = value)  _
						= false) Then
				If Me._PinjamHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPinjamHeaderIdChanging(value)
				Me.SendPropertyChanging
				Me._PinjamHeaderId = value
				Me.SendPropertyChanged("PinjamHeaderId")
				Me.OnPinjamHeaderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KaryawanId", DbType:="Int NOT NULL")>  _
	Public Property KaryawanId() As Integer
		Get
			Return Me._KaryawanId
		End Get
		Set
			If ((Me._KaryawanId = value)  _
						= false) Then
				If Me._Karyawan.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnKaryawanIdChanging(value)
				Me.SendPropertyChanging
				Me._KaryawanId = value
				Me.SendPropertyChanged("KaryawanId")
				Me.OnKaryawanIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TglKembali", DbType:="DateTime NOT NULL")>  _
	Public Property TglKembali() As Date
		Get
			Return Me._TglKembali
		End Get
		Set
			If ((Me._TglKembali = value)  _
						= false) Then
				Me.OnTglKembaliChanging(value)
				Me.SendPropertyChanging
				Me._TglKembali = value
				Me.SendPropertyChanged("TglKembali")
				Me.OnTglKembaliChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_TglDikembali", DbType:="DateTime NOT NULL")>  _
	Public Property TglDikembali() As Date
		Get
			Return Me._TglDikembali
		End Get
		Set
			If ((Me._TglDikembali = value)  _
						= false) Then
				Me.OnTglDikembaliChanging(value)
				Me.SendPropertyChanging
				Me._TglDikembali = value
				Me.SendPropertyChanged("TglDikembali")
				Me.OnTglDikembaliChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Denda", DbType:="Int NOT NULL")>  _
	Public Property Denda() As Integer
		Get
			Return Me._Denda
		End Get
		Set
			If ((Me._Denda = value)  _
						= false) Then
				Me.OnDendaChanging(value)
				Me.SendPropertyChanging
				Me._Denda = value
				Me.SendPropertyChanged("Denda")
				Me.OnDendaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Karyawan_Kembali", Storage:="_Karyawan", ThisKey:="KaryawanId", OtherKey:="KaryawanId", IsForeignKey:=true)>  _
	Public Property Karyawan() As Karyawan
		Get
			Return Me._Karyawan.Entity
		End Get
		Set
			Dim previousValue As Karyawan = Me._Karyawan.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Karyawan.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Karyawan.Entity = Nothing
					previousValue.Kembalis.Remove(Me)
				End If
				Me._Karyawan.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Kembalis.Add(Me)
					Me._KaryawanId = value.KaryawanId
				Else
					Me._KaryawanId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Karyawan")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PinjamHeader_Kembali", Storage:="_PinjamHeader", ThisKey:="PinjamHeaderId", OtherKey:="PinjamHeaderId", IsForeignKey:=true)>  _
	Public Property PinjamHeader() As PinjamHeader
		Get
			Return Me._PinjamHeader.Entity
		End Get
		Set
			Dim previousValue As PinjamHeader = Me._PinjamHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PinjamHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PinjamHeader.Entity = Nothing
					previousValue.Kembalis.Remove(Me)
				End If
				Me._PinjamHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.Kembalis.Add(Me)
					Me._PinjamHeaderId = value.PinjamHeaderId
				Else
					Me._PinjamHeaderId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PinjamHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.Pelanggan")>  _
Partial Public Class Pelanggan
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PelangganId As Integer
	
	Private _PelangganNama As String
	
	Private _Alamat As String
	
	Private _NoHP As String
	
	Private _PinjamHeaders As EntitySet(Of PinjamHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPelangganIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPelangganIdChanged()
    End Sub
    Partial Private Sub OnPelangganNamaChanging(value As String)
    End Sub
    Partial Private Sub OnPelangganNamaChanged()
    End Sub
    Partial Private Sub OnAlamatChanging(value As String)
    End Sub
    Partial Private Sub OnAlamatChanged()
    End Sub
    Partial Private Sub OnNoHPChanging(value As String)
    End Sub
    Partial Private Sub OnNoHPChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._PinjamHeaders = New EntitySet(Of PinjamHeader)(AddressOf Me.attach_PinjamHeaders, AddressOf Me.detach_PinjamHeaders)
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PelangganId", AutoSync:=AutoSync.OnInsert, DbType:="Int NOT NULL IDENTITY", IsPrimaryKey:=true, IsDbGenerated:=true)>  _
	Public Property PelangganId() As Integer
		Get
			Return Me._PelangganId
		End Get
		Set
			If ((Me._PelangganId = value)  _
						= false) Then
				Me.OnPelangganIdChanging(value)
				Me.SendPropertyChanging
				Me._PelangganId = value
				Me.SendPropertyChanged("PelangganId")
				Me.OnPelangganIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PelangganNama", DbType:="VarChar(100) NOT NULL", CanBeNull:=false)>  _
	Public Property PelangganNama() As String
		Get
			Return Me._PelangganNama
		End Get
		Set
			If (String.Equals(Me._PelangganNama, value) = false) Then
				Me.OnPelangganNamaChanging(value)
				Me.SendPropertyChanging
				Me._PelangganNama = value
				Me.SendPropertyChanged("PelangganNama")
				Me.OnPelangganNamaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Alamat", DbType:="Text NOT NULL", CanBeNull:=false, UpdateCheck:=UpdateCheck.Never)>  _
	Public Property Alamat() As String
		Get
			Return Me._Alamat
		End Get
		Set
			If (String.Equals(Me._Alamat, value) = false) Then
				Me.OnAlamatChanging(value)
				Me.SendPropertyChanging
				Me._Alamat = value
				Me.SendPropertyChanged("Alamat")
				Me.OnAlamatChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_NoHP", DbType:="VarChar(20) NOT NULL", CanBeNull:=false)>  _
	Public Property NoHP() As String
		Get
			Return Me._NoHP
		End Get
		Set
			If (String.Equals(Me._NoHP, value) = false) Then
				Me.OnNoHPChanging(value)
				Me.SendPropertyChanging
				Me._NoHP = value
				Me.SendPropertyChanged("NoHP")
				Me.OnNoHPChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Pelanggan_PinjamHeader", Storage:="_PinjamHeaders", ThisKey:="PelangganId", OtherKey:="PelangganId")>  _
	Public Property PinjamHeaders() As EntitySet(Of PinjamHeader)
		Get
			Return Me._PinjamHeaders
		End Get
		Set
			Me._PinjamHeaders.Assign(value)
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
	
	Private Sub attach_PinjamHeaders(ByVal entity As PinjamHeader)
		Me.SendPropertyChanging
		entity.Pelanggan = Me
	End Sub
	
	Private Sub detach_PinjamHeaders(ByVal entity As PinjamHeader)
		Me.SendPropertyChanging
		entity.Pelanggan = Nothing
	End Sub
End Class

<Global.System.Data.Linq.Mapping.TableAttribute(Name:="dbo.PinjamDetail")>  _
Partial Public Class PinjamDetail
	Implements System.ComponentModel.INotifyPropertyChanging, System.ComponentModel.INotifyPropertyChanged
	
	Private Shared emptyChangingEventArgs As PropertyChangingEventArgs = New PropertyChangingEventArgs(String.Empty)
	
	Private _PinjamDetailId As Integer
	
	Private _PinjamHeaderId As Integer
	
	Private _KasetId As Integer
	
	Private _Qty As Integer
	
	Private _Harga As Integer
	
	Private _Status As String
	
	Private _Kaset As EntityRef(Of Kaset)
	
	Private _PinjamHeader As EntityRef(Of PinjamHeader)
	
    #Region "Extensibility Method Definitions"
    Partial Private Sub OnLoaded()
    End Sub
    Partial Private Sub OnValidate(action As System.Data.Linq.ChangeAction)
    End Sub
    Partial Private Sub OnCreated()
    End Sub
    Partial Private Sub OnPinjamDetailIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPinjamDetailIdChanged()
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnPinjamHeaderIdChanged()
    End Sub
    Partial Private Sub OnKasetIdChanging(value As Integer)
    End Sub
    Partial Private Sub OnKasetIdChanged()
    End Sub
    Partial Private Sub OnQtyChanging(value As Integer)
    End Sub
    Partial Private Sub OnQtyChanged()
    End Sub
    Partial Private Sub OnHargaChanging(value As Integer)
    End Sub
    Partial Private Sub OnHargaChanged()
    End Sub
    Partial Private Sub OnStatusChanging(value As String)
    End Sub
    Partial Private Sub OnStatusChanged()
    End Sub
    #End Region
	
	Public Sub New()
		MyBase.New
		Me._Kaset = CType(Nothing, EntityRef(Of Kaset))
		Me._PinjamHeader = CType(Nothing, EntityRef(Of PinjamHeader))
		OnCreated
	End Sub
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PinjamDetailId", DbType:="Int NOT NULL", IsPrimaryKey:=true)>  _
	Public Property PinjamDetailId() As Integer
		Get
			Return Me._PinjamDetailId
		End Get
		Set
			If ((Me._PinjamDetailId = value)  _
						= false) Then
				Me.OnPinjamDetailIdChanging(value)
				Me.SendPropertyChanging
				Me._PinjamDetailId = value
				Me.SendPropertyChanged("PinjamDetailId")
				Me.OnPinjamDetailIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_PinjamHeaderId", DbType:="Int NOT NULL")>  _
	Public Property PinjamHeaderId() As Integer
		Get
			Return Me._PinjamHeaderId
		End Get
		Set
			If ((Me._PinjamHeaderId = value)  _
						= false) Then
				If Me._PinjamHeader.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnPinjamHeaderIdChanging(value)
				Me.SendPropertyChanging
				Me._PinjamHeaderId = value
				Me.SendPropertyChanged("PinjamHeaderId")
				Me.OnPinjamHeaderIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_KasetId", DbType:="Int NOT NULL")>  _
	Public Property KasetId() As Integer
		Get
			Return Me._KasetId
		End Get
		Set
			If ((Me._KasetId = value)  _
						= false) Then
				If Me._Kaset.HasLoadedOrAssignedValue Then
					Throw New System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException()
				End If
				Me.OnKasetIdChanging(value)
				Me.SendPropertyChanging
				Me._KasetId = value
				Me.SendPropertyChanged("KasetId")
				Me.OnKasetIdChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Qty", DbType:="Int NOT NULL")>  _
	Public Property Qty() As Integer
		Get
			Return Me._Qty
		End Get
		Set
			If ((Me._Qty = value)  _
						= false) Then
				Me.OnQtyChanging(value)
				Me.SendPropertyChanging
				Me._Qty = value
				Me.SendPropertyChanged("Qty")
				Me.OnQtyChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Harga", DbType:="Int NOT NULL")>  _
	Public Property Harga() As Integer
		Get
			Return Me._Harga
		End Get
		Set
			If ((Me._Harga = value)  _
						= false) Then
				Me.OnHargaChanging(value)
				Me.SendPropertyChanging
				Me._Harga = value
				Me.SendPropertyChanged("Harga")
				Me.OnHargaChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.ColumnAttribute(Storage:="_Status", DbType:="VarChar(255) NOT NULL", CanBeNull:=false)>  _
	Public Property Status() As String
		Get
			Return Me._Status
		End Get
		Set
			If (String.Equals(Me._Status, value) = false) Then
				Me.OnStatusChanging(value)
				Me.SendPropertyChanging
				Me._Status = value
				Me.SendPropertyChanged("Status")
				Me.OnStatusChanged
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="Kaset_PinjamDetail", Storage:="_Kaset", ThisKey:="KasetId", OtherKey:="KasetId", IsForeignKey:=true)>  _
	Public Property Kaset() As Kaset
		Get
			Return Me._Kaset.Entity
		End Get
		Set
			Dim previousValue As Kaset = Me._Kaset.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._Kaset.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._Kaset.Entity = Nothing
					previousValue.PinjamDetails.Remove(Me)
				End If
				Me._Kaset.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PinjamDetails.Add(Me)
					Me._KasetId = value.KasetId
				Else
					Me._KasetId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("Kaset")
			End If
		End Set
	End Property
	
	<Global.System.Data.Linq.Mapping.AssociationAttribute(Name:="PinjamHeader_PinjamDetail", Storage:="_PinjamHeader", ThisKey:="PinjamHeaderId", OtherKey:="PinjamHeaderId", IsForeignKey:=true)>  _
	Public Property PinjamHeader() As PinjamHeader
		Get
			Return Me._PinjamHeader.Entity
		End Get
		Set
			Dim previousValue As PinjamHeader = Me._PinjamHeader.Entity
			If ((Object.Equals(previousValue, value) = false)  _
						OrElse (Me._PinjamHeader.HasLoadedOrAssignedValue = false)) Then
				Me.SendPropertyChanging
				If ((previousValue Is Nothing)  _
							= false) Then
					Me._PinjamHeader.Entity = Nothing
					previousValue.PinjamDetails.Remove(Me)
				End If
				Me._PinjamHeader.Entity = value
				If ((value Is Nothing)  _
							= false) Then
					value.PinjamDetails.Add(Me)
					Me._PinjamHeaderId = value.PinjamHeaderId
				Else
					Me._PinjamHeaderId = CType(Nothing, Integer)
				End If
				Me.SendPropertyChanged("PinjamHeader")
			End If
		End Set
	End Property
	
	Public Event PropertyChanging As PropertyChangingEventHandler Implements System.ComponentModel.INotifyPropertyChanging.PropertyChanging
	
	Public Event PropertyChanged As PropertyChangedEventHandler Implements System.ComponentModel.INotifyPropertyChanged.PropertyChanged
	
	Protected Overridable Sub SendPropertyChanging()
		If ((Me.PropertyChangingEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanging(Me, emptyChangingEventArgs)
		End If
	End Sub
	
	Protected Overridable Sub SendPropertyChanged(ByVal propertyName As [String])
		If ((Me.PropertyChangedEvent Is Nothing)  _
					= false) Then
			RaiseEvent PropertyChanged(Me, New PropertyChangedEventArgs(propertyName))
		End If
	End Sub
End Class
